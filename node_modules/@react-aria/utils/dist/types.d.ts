import { HTMLAttributes, MutableRefObject, EffectCallback } from "react";
import { Orientation, DOMProps } from "@react-types/shared";
export function useId(defaultId?: string): string;
export function mergeIds(a: string, b: string): string;
export function useSlotId(): string;
export function chain(...callbacks: any[]): (...args: any[]) => void;
interface Props {
    [key: string]: any;
}
export function mergeProps<T extends Props, U extends Props>(a: T, b: U): T & U;
export function clamp(value: number, min?: number, max?: number): number;
export function getOffset(element: any, reverse: any, orientation?: string): any;
interface UseDrag1DProps {
    containerRef: MutableRefObject<HTMLElement>;
    reverse?: boolean;
    orientation?: Orientation;
    onHover?: (hovered: boolean) => void;
    onDrag?: (dragging: boolean) => void;
    onPositionChange?: (position: number) => void;
    onIncrement?: () => void;
    onDecrement?: () => void;
    onIncrementToMax?: () => void;
    onDecrementToMin?: () => void;
    onCollapseToggle?: () => void;
}
export function useDrag1D(props: UseDrag1DProps): HTMLAttributes<HTMLElement>;
export function useLabels(props: DOMProps, defaultLabel?: string): DOMProps;
export function useUpdateEffect(effect: EffectCallback, dependencies: any[]): void;
export function focusWithoutScrolling(element: HTMLElement): void;

//# sourceMappingURL=types.d.ts.map
