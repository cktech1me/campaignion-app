var _react2 = require("react");

var _react = $parcel$interopDefault(_react2);

var useContext = _react2.useContext;
var useEffect = _react2.useEffect;
var useState = _react2.useState;

var _babelRuntimeHelpersSlicedToArray = $parcel$interopDefault(require("@babel/runtime/helpers/slicedToArray"));

var _intlMessageformat = $parcel$interopDefault(require("intl-messageformat"));

function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}

function $e742a9645f33fbd785650baae63e$export$getDefaultLocale() {
  // @ts-ignore
  return typeof navigator !== 'undefined' && (navigator.language || navigator.userLanguage) || 'en-US';
} // Returns the current browser/system language, and updates when it changes.


function $e742a9645f33fbd785650baae63e$export$useDefaultLocale() {
  var _useState = useState($e742a9645f33fbd785650baae63e$export$getDefaultLocale()),
      _useState2 = _babelRuntimeHelpersSlicedToArray(_useState, 2),
      defaultLocale = _useState2[0],
      setDefaultLocale = _useState2[1];

  useEffect(function () {
    var updateLocale = function updateLocale() {
      setDefaultLocale($e742a9645f33fbd785650baae63e$export$getDefaultLocale());
    };

    window.addEventListener('languagechange', updateLocale);
    return function () {
      window.removeEventListener('languagechange', updateLocale);
    };
  }, []);
  return defaultLocale;
}

var $a34e7f3f5235bb4eb2df4880cecc26$var$I18nContext = _react.createContext({
  locale: 'en-US',
  direction: 'ltr'
});

function Provider(props) {
  var locale = props.locale,
      children = props.children;
  var defaultLocale = $e742a9645f33fbd785650baae63e$export$useDefaultLocale();

  if (!locale) {
    locale = defaultLocale;
  }

  var value = {
    locale: locale,
    direction: $a34e7f3f5235bb4eb2df4880cecc26$var$isRTL(locale) ? 'rtl' : 'ltr'
  };
  return (/*#__PURE__*/_react.createElement($a34e7f3f5235bb4eb2df4880cecc26$var$I18nContext.Provider, {
      value: value
    }, children)
  );
}

exports.Provider = Provider;

function useLocale() {
  return useContext($a34e7f3f5235bb4eb2df4880cecc26$var$I18nContext);
} // https://en.wikipedia.org/wiki/Right-to-left


exports.useLocale = useLocale;
var $a34e7f3f5235bb4eb2df4880cecc26$var$RTL_SCRIPTS = new Set(['Arab', 'Syrc', 'Samr', 'Mand', 'Thaa', 'Mend', 'Nkoo', 'Adlm', 'Rohg', 'Hebr']);
var $a34e7f3f5235bb4eb2df4880cecc26$var$RTL_LANGS = new Set(['ae', 'ar', 'arc', 'bcc', 'bqi', 'ckb', 'dv', 'fa', 'glk', 'he', 'ku', 'mzn', 'nqo', 'pnb', 'ps', 'sd', 'ug', 'ur', 'yi']);

function $a34e7f3f5235bb4eb2df4880cecc26$var$isRTL(locale) {
  // If the Intl.Locale API is available, use it to get the script for the locale.
  // This is more accurate than guessing by language, since languages can be written in multiple scripts.
  // @ts-ignore
  if (Intl.Locale) {
    // @ts-ignore
    var script = new Intl.Locale(locale).maximize().script;
    return $a34e7f3f5235bb4eb2df4880cecc26$var$RTL_SCRIPTS.has(script);
  } // If not, just guess by the language (first part of the locale)


  var lang = locale.split('-')[0];
  return $a34e7f3f5235bb4eb2df4880cecc26$var$RTL_LANGS.has(lang);
}

var $f548ef53bf293fb4b5dee223bd82e70a$var$formatterCache = new Map();

function useMessageFormatter(strings) {
  var _useLocale = useLocale(),
      currentLocale = _useLocale.locale; // Check the cache


  var localeCache = $f548ef53bf293fb4b5dee223bd82e70a$var$formatterCache.get(strings);

  if (localeCache && localeCache.has(currentLocale)) {
    return localeCache.get(currentLocale);
  } // Add to the formatter cache if needed


  if (!localeCache) {
    localeCache = new Map();
    $f548ef53bf293fb4b5dee223bd82e70a$var$formatterCache.set(strings, localeCache);
  } // Get the strings for the current locale


  var localeStrings = $f548ef53bf293fb4b5dee223bd82e70a$var$selectLocale(strings, currentLocale); // Create a new message formatter

  var cache = {};

  var formatMessage = function formatMessage(key, variables, formats) {
    var message = cache[key + '.' + currentLocale];

    if (!message) {
      var msg = localeStrings[key];

      if (!msg) {
        throw new Error("Could not find intl message ".concat(key, " in ").concat(currentLocale, " locale"));
      }

      message = new _intlMessageformat(msg, currentLocale, formats);
      cache[key] = message;
    }

    return message.format(variables);
  };

  localeCache.set(currentLocale, formatMessage);
  return formatMessage;
}

exports.useMessageFormatter = useMessageFormatter;

function $f548ef53bf293fb4b5dee223bd82e70a$var$selectLocale(strings, locale) {
  // If there is an exact match, use it.
  if (strings[locale]) {
    return strings[locale];
  } // Attempt to find the closest match by language.
  // For example, if the locale is fr-CA (French Canadian), but there is only
  // an fr-FR (France) set of strings, use that.


  var language = $f548ef53bf293fb4b5dee223bd82e70a$var$getLanguage(locale);

  for (var key in strings) {
    if (key.startsWith(language + '-')) {
      return strings[key];
    }
  } // Nothing close, use english.


  return strings['en-US'];
}

function $f548ef53bf293fb4b5dee223bd82e70a$var$getLanguage(locale) {
  // @ts-ignore
  if (Intl.Locale) {
    // @ts-ignore
    return new Intl.Locale(locale).language;
  }

  return locale.split('-')[0];
}

var $aaeb363b6aa03da8a97a316ff78529$var$formatterCache = new Map();

function useDateFormatter(options) {
  var _useLocale = useLocale(),
      locale = _useLocale.locale;

  var cacheKey = locale + (options ? Object.entries(options).sort(function (a, b) {
    return a[0] < b[0] ? -1 : 1;
  }).join() : '');

  if ($aaeb363b6aa03da8a97a316ff78529$var$formatterCache.has(cacheKey)) {
    return $aaeb363b6aa03da8a97a316ff78529$var$formatterCache.get(cacheKey);
  }

  var formatter = new Intl.DateTimeFormat(locale, options);
  $aaeb363b6aa03da8a97a316ff78529$var$formatterCache.set(cacheKey, formatter);
  return formatter;
}

exports.useDateFormatter = useDateFormatter;
var $a1843970358d834976576c60b4708df$var$formatterCache = new Map();

function useNumberFormatter(options) {
  var _useLocale = useLocale(),
      locale = _useLocale.locale;

  var cacheKey = locale + (options ? Object.entries(options).sort(function (a, b) {
    return a[0] < b[0] ? -1 : 1;
  }).join() : '');

  if ($a1843970358d834976576c60b4708df$var$formatterCache.has(cacheKey)) {
    return $a1843970358d834976576c60b4708df$var$formatterCache.get(cacheKey);
  }

  var numberFormatter = new Intl.NumberFormat(locale, options);
  $a1843970358d834976576c60b4708df$var$formatterCache.set(cacheKey, numberFormatter);
  return numberFormatter;
}

exports.useNumberFormatter = useNumberFormatter;
var $f6b91c1075a75eeb44c1e388$var$cache = new Map();

function useCollator(options) {
  var _useLocale = useLocale(),
      locale = _useLocale.locale;

  var cacheKey = locale + (options ? Object.entries(options).sort(function (a, b) {
    return a[0] < b[0] ? -1 : 1;
  }).join() : '');

  if ($f6b91c1075a75eeb44c1e388$var$cache.has(cacheKey)) {
    return $f6b91c1075a75eeb44c1e388$var$cache.get(cacheKey);
  }

  var formatter = new Intl.Collator(locale, options);
  $f6b91c1075a75eeb44c1e388$var$cache.set(cacheKey, formatter);
  return formatter;
}

exports.useCollator = useCollator;