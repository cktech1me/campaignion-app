import _react, { useContext, useEffect, useState } from "react";
import _intlMessageformat from "intl-messageformat";

function $f64e833f1a7aba5469a82b2d5402655$export$getDefaultLocale() {
  // @ts-ignore
  return typeof navigator !== 'undefined' && (navigator.language || navigator.userLanguage) || 'en-US';
} // Returns the current browser/system language, and updates when it changes.


function $f64e833f1a7aba5469a82b2d5402655$export$useDefaultLocale() {
  let [defaultLocale, setDefaultLocale] = useState($f64e833f1a7aba5469a82b2d5402655$export$getDefaultLocale());
  useEffect(() => {
    let updateLocale = () => {
      setDefaultLocale($f64e833f1a7aba5469a82b2d5402655$export$getDefaultLocale());
    };

    window.addEventListener('languagechange', updateLocale);
    return () => {
      window.removeEventListener('languagechange', updateLocale);
    };
  }, []);
  return defaultLocale;
}

const $b8b17a145b8bd39565e2a94d2f48852$var$I18nContext = _react.createContext({
  locale: 'en-US',
  direction: 'ltr'
});

export function Provider(props) {
  let {
    locale,
    children
  } = props;
  let defaultLocale = $f64e833f1a7aba5469a82b2d5402655$export$useDefaultLocale();

  if (!locale) {
    locale = defaultLocale;
  }

  let value = {
    locale,
    direction: $b8b17a145b8bd39565e2a94d2f48852$var$isRTL(locale) ? 'rtl' : 'ltr'
  };
  return (/*#__PURE__*/_react.createElement($b8b17a145b8bd39565e2a94d2f48852$var$I18nContext.Provider, {
      value: value
    }, children)
  );
}
export function useLocale() {
  return useContext($b8b17a145b8bd39565e2a94d2f48852$var$I18nContext);
} // https://en.wikipedia.org/wiki/Right-to-left

const $b8b17a145b8bd39565e2a94d2f48852$var$RTL_SCRIPTS = new Set(['Arab', 'Syrc', 'Samr', 'Mand', 'Thaa', 'Mend', 'Nkoo', 'Adlm', 'Rohg', 'Hebr']);
const $b8b17a145b8bd39565e2a94d2f48852$var$RTL_LANGS = new Set(['ae', 'ar', 'arc', 'bcc', 'bqi', 'ckb', 'dv', 'fa', 'glk', 'he', 'ku', 'mzn', 'nqo', 'pnb', 'ps', 'sd', 'ug', 'ur', 'yi']);

function $b8b17a145b8bd39565e2a94d2f48852$var$isRTL(locale) {
  // If the Intl.Locale API is available, use it to get the script for the locale.
  // This is more accurate than guessing by language, since languages can be written in multiple scripts.
  // @ts-ignore
  if (Intl.Locale) {
    // @ts-ignore
    let script = new Intl.Locale(locale).maximize().script;
    return $b8b17a145b8bd39565e2a94d2f48852$var$RTL_SCRIPTS.has(script);
  } // If not, just guess by the language (first part of the locale)


  let lang = locale.split('-')[0];
  return $b8b17a145b8bd39565e2a94d2f48852$var$RTL_LANGS.has(lang);
}

const $f15dbd0a2c43e9fd57565b379ec1738$var$formatterCache = new Map();
export function useMessageFormatter(strings) {
  let {
    locale: currentLocale
  } = useLocale(); // Check the cache

  let localeCache = $f15dbd0a2c43e9fd57565b379ec1738$var$formatterCache.get(strings);

  if (localeCache && localeCache.has(currentLocale)) {
    return localeCache.get(currentLocale);
  } // Add to the formatter cache if needed


  if (!localeCache) {
    localeCache = new Map();
    $f15dbd0a2c43e9fd57565b379ec1738$var$formatterCache.set(strings, localeCache);
  } // Get the strings for the current locale


  let localeStrings = $f15dbd0a2c43e9fd57565b379ec1738$var$selectLocale(strings, currentLocale); // Create a new message formatter

  let cache = {};

  let formatMessage = (key, variables, formats) => {
    let message = cache[key + '.' + currentLocale];

    if (!message) {
      let msg = localeStrings[key];

      if (!msg) {
        throw new Error("Could not find intl message ".concat(key, " in ").concat(currentLocale, " locale"));
      }

      message = new _intlMessageformat(msg, currentLocale, formats);
      cache[key] = message;
    }

    return message.format(variables);
  };

  localeCache.set(currentLocale, formatMessage);
  return formatMessage;
}

function $f15dbd0a2c43e9fd57565b379ec1738$var$selectLocale(strings, locale) {
  // If there is an exact match, use it.
  if (strings[locale]) {
    return strings[locale];
  } // Attempt to find the closest match by language.
  // For example, if the locale is fr-CA (French Canadian), but there is only
  // an fr-FR (France) set of strings, use that.


  let language = $f15dbd0a2c43e9fd57565b379ec1738$var$getLanguage(locale);

  for (let key in strings) {
    if (key.startsWith(language + '-')) {
      return strings[key];
    }
  } // Nothing close, use english.


  return strings['en-US'];
}

function $f15dbd0a2c43e9fd57565b379ec1738$var$getLanguage(locale) {
  // @ts-ignore
  if (Intl.Locale) {
    // @ts-ignore
    return new Intl.Locale(locale).language;
  }

  return locale.split('-')[0];
}

let $aba9d79335df5c45bb681630807272a2$var$formatterCache = new Map();
export function useDateFormatter(options) {
  let {
    locale
  } = useLocale();
  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : '');

  if ($aba9d79335df5c45bb681630807272a2$var$formatterCache.has(cacheKey)) {
    return $aba9d79335df5c45bb681630807272a2$var$formatterCache.get(cacheKey);
  }

  let formatter = new Intl.DateTimeFormat(locale, options);
  $aba9d79335df5c45bb681630807272a2$var$formatterCache.set(cacheKey, formatter);
  return formatter;
}
let $fc1e067f8521660d23904b831e43d70e$var$formatterCache = new Map();
export function useNumberFormatter(options) {
  let {
    locale
  } = useLocale();
  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : '');

  if ($fc1e067f8521660d23904b831e43d70e$var$formatterCache.has(cacheKey)) {
    return $fc1e067f8521660d23904b831e43d70e$var$formatterCache.get(cacheKey);
  }

  let numberFormatter = new Intl.NumberFormat(locale, options);
  $fc1e067f8521660d23904b831e43d70e$var$formatterCache.set(cacheKey, numberFormatter);
  return numberFormatter;
}
let $a945ed74e7f548aadf4fbe063431e7ff$var$cache = new Map();
export function useCollator(options) {
  let {
    locale
  } = useLocale();
  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : '');

  if ($a945ed74e7f548aadf4fbe063431e7ff$var$cache.has(cacheKey)) {
    return $a945ed74e7f548aadf4fbe063431e7ff$var$cache.get(cacheKey);
  }

  let formatter = new Intl.Collator(locale, options);
  $a945ed74e7f548aadf4fbe063431e7ff$var$cache.set(cacheKey, formatter);
  return formatter;
}