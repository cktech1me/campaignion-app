import { HTMLAttributes, RefObject, AriaAttributes, ReactNode } from "react";
import { Placement, PlacementAxis } from "@react-types/overlays";
export interface PositionProps {
    placement?: Placement;
    containerPadding?: number;
    offset?: number;
    crossOffset?: number;
    shouldFlip?: boolean;
    boundaryElement?: HTMLElement;
    isOpen?: boolean;
}
interface AriaPositionProps extends PositionProps {
    targetRef: RefObject<HTMLElement>;
    overlayRef: RefObject<HTMLElement>;
    scrollRef?: RefObject<HTMLElement>;
    shouldUpdatePosition?: boolean;
}
interface PositionAria {
    overlayProps: HTMLAttributes<Element>;
    arrowProps: HTMLAttributes<Element>;
    placement: PlacementAxis;
}
export function useOverlayPosition(props: AriaPositionProps): PositionAria;
interface OverlayProps {
    ref: RefObject<HTMLElement | null>;
    onClose?: () => void;
    isOpen?: boolean;
    isDismissable?: boolean;
    shouldCloseOnBlur?: boolean;
}
interface OverlayAria {
    overlayProps: HTMLAttributes<HTMLElement>;
}
export function useOverlay(props: OverlayProps): OverlayAria;
interface OverlayTriggerProps {
    ref: RefObject<HTMLElement | null>;
    type: 'dialog' | 'menu' | 'listbox' | 'tree' | 'grid';
    onClose?: () => void;
    isOpen?: boolean;
}
interface OverlayTriggerAria {
    triggerProps: HTMLAttributes<HTMLElement>;
    overlayProps: HTMLAttributes<HTMLElement>;
}
export function useOverlayTrigger(props: OverlayTriggerProps): OverlayTriggerAria;
export function usePreventScroll(): void;
interface ModalProviderProps {
    children: ReactNode;
}
export function ModalProvider(props: ModalProviderProps): JSX.Element;
interface ModalProviderAria {
    modalProviderProps: AriaAttributes;
}
export function useModalProvider(): ModalProviderAria;
export function useModal(): void;
interface DismissButtonProps {
    onDismiss?: () => void;
}
export function DismissButton(props: DismissButtonProps): JSX.Element;

//# sourceMappingURL=types.d.ts.map
