import _babelRuntimeHelpersEsmObjectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import { mergeProps } from "@react-aria/utils";
import { useFocusable } from "@react-aria/focus";
import { usePress } from "@react-aria/interactions";
export function useToggle(props, state, ref) {
  let {
    isDisabled = false,
    isRequired,
    isReadOnly,
    value,
    name,
    children,
    'aria-label': ariaLabel,
    validationState = 'valid'
  } = props;

  let onChange = e => {
    // since we spread props on label, onChange will end up there as well as in here.
    // so we have to stop propagation at the lowest level that we care about
    e.stopPropagation();
    state.setSelected(e.target.checked);
  };

  let hasChildren = children !== null;
  let hasAriaLabel = ariaLabel !== null;

  if (!hasChildren && !hasAriaLabel) {
    console.warn('If you do not provide children, you must specify an aria-label for accessibility');
  }

  let isInvalid = validationState === 'invalid'; // This handles focusing the input on pointer down, which Safari does not do by default.

  let {
    pressProps
  } = usePress({
    isDisabled
  });
  let {
    focusableProps
  } = useFocusable(props, ref);
  let interactions = mergeProps(pressProps, focusableProps);
  return {
    inputProps: _babelRuntimeHelpersEsmObjectSpread({
      'aria-label': ariaLabel,
      'aria-invalid': isInvalid,
      onChange,
      disabled: isDisabled,
      required: isRequired,
      readOnly: isReadOnly,
      value,
      name,
      type: 'checkbox'
    }, interactions)
  };
}