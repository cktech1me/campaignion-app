var _babelRuntimeHelpersObjectSpread = $parcel$interopDefault(require("@babel/runtime/helpers/objectSpread2"));

var mergeProps = require("@react-aria/utils").mergeProps;

var useFocusable = require("@react-aria/focus").useFocusable;

var usePress = require("@react-aria/interactions").usePress;

function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}

function useToggle(props, state, ref) {
  var _props$isDisabled = props.isDisabled,
      isDisabled = _props$isDisabled === void 0 ? false : _props$isDisabled,
      isRequired = props.isRequired,
      isReadOnly = props.isReadOnly,
      value = props.value,
      name = props.name,
      children = props.children,
      ariaLabel = props['aria-label'],
      _props$validationStat = props.validationState,
      validationState = _props$validationStat === void 0 ? 'valid' : _props$validationStat;

  var onChange = function onChange(e) {
    // since we spread props on label, onChange will end up there as well as in here.
    // so we have to stop propagation at the lowest level that we care about
    e.stopPropagation();
    state.setSelected(e.target.checked);
  };

  var hasChildren = children !== null;
  var hasAriaLabel = ariaLabel !== null;

  if (!hasChildren && !hasAriaLabel) {
    console.warn('If you do not provide children, you must specify an aria-label for accessibility');
  }

  var isInvalid = validationState === 'invalid'; // This handles focusing the input on pointer down, which Safari does not do by default.

  var _usePress = usePress({
    isDisabled: isDisabled
  }),
      pressProps = _usePress.pressProps;

  var _useFocusable = useFocusable(props, ref),
      focusableProps = _useFocusable.focusableProps;

  var interactions = mergeProps(pressProps, focusableProps);
  return {
    inputProps: _babelRuntimeHelpersObjectSpread({
      'aria-label': ariaLabel,
      'aria-invalid': isInvalid,
      onChange: onChange,
      disabled: isDisabled,
      required: isRequired,
      readOnly: isReadOnly,
      value: value,
      name: name,
      type: 'checkbox'
    }, interactions)
  };
}

exports.useToggle = useToggle;