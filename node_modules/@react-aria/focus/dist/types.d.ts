import { ReactNode, ReactElement, RefObject } from "react";
import { FocusEvents, KeyboardEvents } from "@react-types/shared";
interface FocusScopeProps {
    children: ReactNode;
    contain?: boolean;
    restoreFocus?: boolean;
    autoFocus?: boolean;
}
interface FocusManagerOptions {
    from?: HTMLElement;
    tabbable?: boolean;
    wrap?: boolean;
}
interface FocusManager {
    focusNext(opts?: FocusManagerOptions): HTMLElement;
    focusPrevious(opts?: FocusManagerOptions): HTMLElement;
}
export function FocusScope(props: FocusScopeProps): JSX.Element;
export function useFocusManager(): FocusManager;
interface FocusRingProps {
    children?: ReactElement;
    focusClass?: string;
    focusRingClass?: string;
    within?: boolean;
    isTextInput?: boolean;
    autoFocus?: boolean;
}
export function FocusRing(props: FocusRingProps): React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)>) | (new (props: any) => React.Component<any, any, any>)>;
interface FocusableProps extends FocusEvents, KeyboardEvents {
    isDisabled?: boolean;
    autoFocus?: boolean;
}
export function useFocusable(props: FocusableProps, domRef?: RefObject<HTMLElement>): {
    focusableProps: import("react").HTMLAttributes<HTMLElement>;
};

//# sourceMappingURL=types.d.ts.map
