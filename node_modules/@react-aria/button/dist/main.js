var _babelRuntimeHelpersObjectSpread = $parcel$interopDefault(require("@babel/runtime/helpers/objectSpread2"));

var mergeProps = require("@react-aria/utils").mergeProps;

var _temp = require("@react-aria/interactions");

var useDOMPropsResponder = _temp.useDOMPropsResponder;
var usePress = _temp.usePress;

var useFocusable = require("@react-aria/focus").useFocusable;

function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}

function useButton(props, ref) {
  var _props$elementType = props.elementType,
      elementType = _props$elementType === void 0 ? 'button' : _props$elementType,
      isDisabled = props.isDisabled,
      onPress = props.onPress,
      onPressStart = props.onPressStart,
      onPressEnd = props.onPressEnd,
      onPressChange = props.onPressChange,
      deprecatedOnClick = props.onClick,
      href = props.href,
      target = props.target,
      tabIndex = props.tabIndex,
      isSelected = props.isSelected,
      validationState = props.validationState,
      ariaExpanded = props['aria-expanded'],
      ariaHasPopup = props['aria-haspopup'],
      _props$type = props.type,
      type = _props$type === void 0 ? 'button' : _props$type;
  var additionalProps;

  if (elementType !== 'button') {
    additionalProps = {
      role: 'button',
      tabIndex: isDisabled ? undefined : tabIndex || 0,
      href: elementType === 'a' && isDisabled ? undefined : href,
      target: elementType === 'a' ? target : undefined,
      type: elementType === 'input' ? type : undefined,
      disabled: elementType === 'input' ? isDisabled : undefined,
      'aria-disabled': !isDisabled || elementType === 'input' ? undefined : isDisabled
    };
  }

  var _usePress = usePress({
    onPressStart: onPressStart,
    onPressEnd: onPressEnd,
    onPressChange: onPressChange,
    onPress: onPress,
    isDisabled: isDisabled,
    ref: ref
  }),
      pressProps = _usePress.pressProps,
      isPressed = _usePress.isPressed;

  var _useDOMPropsResponder = useDOMPropsResponder(ref),
      contextProps = _useDOMPropsResponder.contextProps;

  var _useFocusable = useFocusable(props, ref),
      focusableProps = _useFocusable.focusableProps;

  var handlers = mergeProps(pressProps, focusableProps);
  var interactions = mergeProps(contextProps, handlers);
  return {
    isPressed: isPressed,
    // Used to indicate press state for visual
    buttonProps: mergeProps(interactions, _babelRuntimeHelpersObjectSpread({
      'aria-haspopup': ariaHasPopup,
      'aria-expanded': ariaExpanded || ariaHasPopup && isSelected,
      'aria-checked': isSelected,
      'aria-invalid': validationState === 'invalid' ? true : null,
      disabled: isDisabled,
      type: type
    }, additionalProps || {}, {
      onClick: function onClick(e) {
        if (deprecatedOnClick) {
          deprecatedOnClick(e);
          console.warn('onClick is deprecated, please use onPress');
        }
      }
    }))
  };
}

exports.useButton = useButton;