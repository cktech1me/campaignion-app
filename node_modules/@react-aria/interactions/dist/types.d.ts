import { DOMProps, PressEvents, KeyboardEvents, FocusEvents, FocusEvent, HoverEvents } from "@react-types/shared";
import { HTMLAttributes, RefObject, SyntheticEvent, ReactElement, ReactNode } from "react";
export interface PressProps extends PressEvents {
    isPressed?: boolean;
    isDisabled?: boolean;
}
export interface PressHookProps extends PressProps, DOMProps {
    ref?: RefObject<HTMLElement>;
}
export interface PressResult {
    isPressed: boolean;
    pressProps: HTMLAttributes<HTMLElement>;
}
export function usePress(props: PressHookProps): PressResult;
interface InteractOutsideProps {
    ref: RefObject<Element>;
    onInteractOutside?: (e: SyntheticEvent) => void;
}
export function useInteractOutside(props: InteractOutsideProps): void;
interface PressableProps extends PressProps {
    children: ReactElement<HTMLAttributes<HTMLElement>, string>;
}
export const Pressable: React.ForwardRefExoticComponent<PressableProps & React.RefAttributes<HTMLElement>>;
interface PressResponderProps extends PressProps {
    children: ReactNode;
}
export const PressResponder: React.ForwardRefExoticComponent<PressResponderProps & React.RefAttributes<HTMLElement>>;
export interface KeyboardProps extends KeyboardEvents {
    isDisabled?: boolean;
}
interface KeyboardResult {
    keyboardProps: HTMLAttributes<HTMLElement>;
}
export function useKeyboard(props: KeyboardProps): KeyboardResult;
interface FocusProps extends FocusEvents {
    isDisabled?: boolean;
}
interface FocusResult {
    focusProps: HTMLAttributes<HTMLElement>;
}
/**
 * Handles focus events for the immediate target (no children)
 */
export function useFocus(props: FocusProps): FocusResult;
interface FocusWithinProps {
    isDisabled?: boolean;
    onFocusWithin?: (e: FocusEvent) => void;
    onBlurWithin?: (e: FocusEvent) => void;
    onFocusWithinChange?: (isFocusWithin: boolean) => void;
}
interface FocusWithinResult {
    focusWithinProps: HTMLAttributes<HTMLElement>;
}
/**
 * Handles focus events for the target and all children
 */
export function useFocusWithin(props: FocusWithinProps): FocusWithinResult;
interface FocusVisibleProps {
    isTextInput?: boolean;
    autoFocus?: boolean;
}
interface FocusVisibleResult {
    isFocusVisible: boolean;
}
/**
 * Manages global focus visible state, and subscribes individual components for updates
 */
export function useFocusVisible(props: FocusVisibleProps): FocusVisibleResult;
export interface HoverProps extends HoverEvents, DOMProps {
    isDisabled?: boolean;
}
export interface HoverHookProps extends HoverProps, DOMProps {
    ref?: RefObject<HTMLElement>;
}
interface HoverResult {
    hoverProps: HTMLAttributes<HTMLElement>;
}
export function useHover(props: HoverHookProps): HoverResult;
export interface DOMPropsResponderContext extends HoverProps {
    register(): void;
    ref?: MutableRefObject<HTMLElement>;
    onMouseEnter?: () => void;
    onMouseLeave?: () => void;
    onPointerEnter?: () => void;
    onPointerLeave?: () => void;
}
export const DOMPropsResponderContext: React.Context<DOMPropsResponderContext>;
export function useDOMPropsResponderContext(props: HoverHookProps): HoverHookProps;
interface DOMPropsResponderProps extends HoverProps {
    children: ReactNode;
}
export const DOMPropsResponder: React.ForwardRefExoticComponent<DOMPropsResponderProps & React.RefAttributes<HTMLElement>>;
export function useDOMPropsResponder(domRef: RefObject<HTMLElement>): {
    contextProps: {
        ref?: RefObject<HTMLElement>;
        onHover?: (e: import("@react-types/shared").HoverEvent) => void;
        onHoverEnd?: (e: import("@react-types/shared").HoverEvent) => void;
        onHoverChange?: (isHovering: boolean) => void;
        id?: string;
        tabIndex?: number;
        role?: string;
        'aria-label'?: string;
        'aria-labelledby'?: string;
        'aria-describedby'?: string;
        'aria-controls'?: string;
        'aria-owns'?: string;
        'aria-hidden'?: boolean | "false" | "true";
    };
};

//# sourceMappingURL=types.d.ts.map
