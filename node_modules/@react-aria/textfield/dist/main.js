var _babelRuntimeHelpersObjectSpread = $parcel$interopDefault(require("@babel/runtime/helpers/objectSpread2"));

var useFocusable = require("@react-aria/focus").useFocusable;

var useLabel = require("@react-aria/label").useLabel;

function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}

function useTextField(props, ref) {
  var _props$isDisabled = props.isDisabled,
      isDisabled = _props$isDisabled === void 0 ? false : _props$isDisabled,
      _props$isRequired = props.isRequired,
      isRequired = _props$isRequired === void 0 ? false : _props$isRequired,
      _props$isReadOnly = props.isReadOnly,
      isReadOnly = _props$isReadOnly === void 0 ? false : _props$isReadOnly,
      validationState = props.validationState,
      _props$type = props.type,
      type = _props$type === void 0 ? 'text' : _props$type,
      _props$onChange = props.onChange,
      _onChange = _props$onChange === void 0 ? function () {} : _props$onChange;

  var _useFocusable = useFocusable(props, ref),
      focusableProps = _useFocusable.focusableProps;

  var _useLabel = useLabel(props),
      labelProps = _useLabel.labelProps,
      fieldProps = _useLabel.fieldProps;

  return {
    labelProps: labelProps,
    textFieldProps: _babelRuntimeHelpersObjectSpread({
      type: type,
      disabled: isDisabled,
      readOnly: isReadOnly,
      'aria-required': isRequired || undefined,
      'aria-invalid': validationState === 'invalid' || undefined,
      onChange: function onChange(e) {
        return _onChange(e.target.value);
      }
    }, focusableProps, {}, fieldProps)
  };
}

exports.useTextField = useTextField;