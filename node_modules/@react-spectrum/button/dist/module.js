import "./main.css";
import _babelRuntimeHelpersEsmExtends from "@babel/runtime/helpers/esm/extends";
import _babelRuntimeHelpersEsmObjectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import { classNames, filterDOMProps, SlotProvider, useFocusableRef, useSlotProps, useStyleProps } from "@react-spectrum/utils";
import { FocusRing } from "@react-aria/focus";
import _react from "react";
import { Text } from "@react-spectrum/typography";
import { useButton } from "@react-aria/button";
import { useProviderProps } from "@react-spectrum/provider";
import _spectrumIconsUiCornerTriangle from "@spectrum-icons/ui/CornerTriangle";
import { mergeProps } from "@react-aria/utils";
import _spectrumIconsUiCrossSmall from "@spectrum-icons/ui/CrossSmall";

function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}

// ASSET: /Users/govett/dev/react-spectrum/node_modules/@adobe/spectrum-css-temp/components/button/vars.css
var $e2dbe016cb19133f62d856e63d9aeb$exports = {};
$e2dbe016cb19133f62d856e63d9aeb$exports = {
  "spectrum-Button": "_spectrum-Button_7a30f",
  "spectrum-ActionButton": "_spectrum-ActionButton_7a30f",
  "spectrum-LogicButton": "_spectrum-LogicButton_7a30f",
  "spectrum-FieldButton": "_spectrum-FieldButton_7a30f",
  "spectrum-ClearButton": "_spectrum-ClearButton_7a30f",
  "spectrum-Icon": "_spectrum-Icon_7a30f",
  "spectrum-Button-label": "_spectrum-Button-label_7a30f",
  "spectrum-ActionButton-label": "_spectrum-ActionButton-label_7a30f",
  "spectrum-ActionButton-hold": "_spectrum-ActionButton-hold_7a30f",
  "spectrum-ActionButton--quiet": "_spectrum-ActionButton--quiet_7a30f",
  "is-disabled": "_is-disabled_7a30f",
  "is-open": "_is-open_7a30f",
  "spectrum-FieldButton--quiet": "_spectrum-FieldButton--quiet_7a30f",
  "spectrum-ClearButton--small": "_spectrum-ClearButton--small_7a30f",
  "spectrum-ButtonGroup--vertical": "_spectrum-ButtonGroup--vertical_7a30f",
  "spectrum-ButtonGroup-item": "_spectrum-ButtonGroup-item_7a30f",
  "spectrum-ButtonGroup--connected": "_spectrum-ButtonGroup--connected_7a30f",
  "focus-ring": "_focus-ring_7a30f",
  "spectrum-ActionButton--emphasized": "_spectrum-ActionButton--emphasized_7a30f",
  "is-selected": "_is-selected_7a30f",
  "spectrum-ButtonGroup--justified": "_spectrum-ButtonGroup--justified_7a30f",
  "is-active": "_is-active_7a30f",
  "spectrum-Button--cta": "_spectrum-Button--cta_7a30f",
  "spectrum-Button--primary": "_spectrum-Button--primary_7a30f",
  "spectrum-Button--secondary": "_spectrum-Button--secondary_7a30f",
  "spectrum-Button--warning": "_spectrum-Button--warning_7a30f",
  "spectrum-Button--overBackground": "_spectrum-Button--overBackground_7a30f",
  "spectrum-Button--quiet": "_spectrum-Button--quiet_7a30f",
  "spectrum-ClearButton--overBackground": "_spectrum-ClearButton--overBackground_7a30f",
  "spectrum-LogicButton--and": "_spectrum-LogicButton--and_7a30f",
  "spectrum-LogicButton--or": "_spectrum-LogicButton--or_7a30f",
  "is-focused": "_is-focused_7a30f",
  "is-placeholder": "_is-placeholder_7a30f",
  "is-invalid": "_is-invalid_7a30f"
};
// todo: CSS hasn't caught up yet, map
let $c84c11987bfe1b857f61034aad247dfe$var$VARIANT_MAPPING = {
  negative: 'warning'
};
var $e2dbe016cb19133f62d856e63d9aeb$$interop$default = $parcel$interopDefault($e2dbe016cb19133f62d856e63d9aeb$exports);

function $c84c11987bfe1b857f61034aad247dfe$var$Button(props, ref) {
  props = useProviderProps(props);
  props = useSlotProps(props, 'button');

  let {
    elementType: ElementType = 'button',
    children,
    variant,
    isQuiet,
    isDisabled,
    autoFocus
  } = props,
      otherProps = _babelRuntimeHelpersEsmObjectWithoutProperties(props, ["elementType", "children", "variant", "isQuiet", "isDisabled", "autoFocus"]);

  let domRef = useFocusableRef(ref);
  let {
    buttonProps,
    isPressed
  } = useButton(props, domRef);
  let {
    styleProps
  } = useStyleProps(otherProps);
  let buttonVariant = variant;

  if ($c84c11987bfe1b857f61034aad247dfe$var$VARIANT_MAPPING[variant]) {
    buttonVariant = $c84c11987bfe1b857f61034aad247dfe$var$VARIANT_MAPPING[variant];
  }

  return (/*#__PURE__*/_react.createElement(FocusRing, {
      focusRingClass: classNames($e2dbe016cb19133f62d856e63d9aeb$$interop$default, 'focus-ring'),
      autoFocus: autoFocus
    }, /*#__PURE__*/_react.createElement(ElementType, _babelRuntimeHelpersEsmExtends({}, filterDOMProps(otherProps), styleProps, buttonProps, {
      ref: domRef,
      className: classNames($e2dbe016cb19133f62d856e63d9aeb$$interop$default, 'spectrum-Button', "spectrum-Button--".concat(buttonVariant), {
        'spectrum-Button--quiet': isQuiet,
        'is-disabled': isDisabled,
        'is-active': isPressed
      }, styleProps.className)
    }), /*#__PURE__*/_react.createElement(SlotProvider, {
      slots: {
        icon: {
          size: 'S',
          UNSAFE_className: classNames($e2dbe016cb19133f62d856e63d9aeb$$interop$default, 'spectrum-Icon')
        },
        text: {
          UNSAFE_className: classNames($e2dbe016cb19133f62d856e63d9aeb$$interop$default, 'spectrum-Button-label')
        }
      }
    }, typeof children === 'string' ? /*#__PURE__*/_react.createElement(Text, null, children) : children)))
  );
}
/**
 * Buttons allow users to perform an action or to navigate to another page.
 * They have multiple styles for various needs, and are ideal for calling attention to
 * where a user needs to do something in order to move forward in a flow.
 */


export let Button = _react.forwardRef($c84c11987bfe1b857f61034aad247dfe$var$Button);

function $f025b588defd85fe5749286a1c175d$var$ActionButton(props, ref) {
  props = useProviderProps(props);

  let {
    elementType: ElementType = 'button',
    isQuiet,
    isSelected,
    isDisabled,
    isEmphasized,
    children,
    holdAffordance,
    autoFocus
  } = props,
      otherProps = _babelRuntimeHelpersEsmObjectWithoutProperties(props, ["elementType", "isQuiet", "isSelected", "isDisabled", "isEmphasized", "children", "holdAffordance", "autoFocus"]);

  let domRef = useFocusableRef(ref);
  let {
    buttonProps,
    isPressed
  } = useButton(props, domRef);
  let {
    styleProps
  } = useStyleProps(otherProps);
  return (/*#__PURE__*/_react.createElement(FocusRing, {
      focusRingClass: classNames($e2dbe016cb19133f62d856e63d9aeb$$interop$default, 'focus-ring'),
      autoFocus: autoFocus
    }, /*#__PURE__*/_react.createElement(ElementType, _babelRuntimeHelpersEsmExtends({}, filterDOMProps(otherProps), styleProps, buttonProps, {
      ref: domRef,
      className: classNames($e2dbe016cb19133f62d856e63d9aeb$$interop$default, 'spectrum-ActionButton', {
        'spectrum-ActionButton--quiet': isQuiet,
        'spectrum-ActionButton--emphasized': isEmphasized,
        'is-active': isPressed,
        'is-selected': isSelected,
        'is-disabled': isDisabled
      }, styleProps.className)
    }), holdAffordance && /*#__PURE__*/_react.createElement(_spectrumIconsUiCornerTriangle, {
      UNSAFE_className: classNames($e2dbe016cb19133f62d856e63d9aeb$$interop$default, 'spectrum-ActionButton-hold')
    }), /*#__PURE__*/_react.createElement(SlotProvider, {
      slots: {
        icon: {
          size: 'S',
          UNSAFE_className: classNames($e2dbe016cb19133f62d856e63d9aeb$$interop$default, 'spectrum-Icon')
        },
        text: {
          UNSAFE_className: classNames($e2dbe016cb19133f62d856e63d9aeb$$interop$default, 'spectrum-ActionButton-label')
        }
      }
    }, typeof children === 'string' ? /*#__PURE__*/_react.createElement(Text, null, children) : children)))
  );
}
/**
 * ActionButtons allow users to perform an action or mark a selection.
 * They’re used for similar, task-based options within a workflow, and are ideal for interfaces where buttons aren’t meant to draw a lot of attention.
 */


export let ActionButton = _react.forwardRef($f025b588defd85fe5749286a1c175d$var$ActionButton);

// @private
function $f81b3f6796ef85c98d1b23c2911633$var$FieldButton(props, ref) {
  let {
    elementType: ElementType = 'button',
    isQuiet,
    isDisabled,
    validationState,
    children,
    autoFocus,
    isActive
  } = props,
      otherProps = _babelRuntimeHelpersEsmObjectWithoutProperties(props, ["elementType", "isQuiet", "isDisabled", "validationState", "children", "autoFocus", "isActive"]);

  let domRef = useFocusableRef(ref);
  let {
    buttonProps,
    isPressed
  } = useButton(props, domRef);
  let {
    styleProps
  } = useStyleProps(otherProps);
  return (/*#__PURE__*/_react.createElement(FocusRing, {
      focusRingClass: classNames($e2dbe016cb19133f62d856e63d9aeb$$interop$default, 'focus-ring'),
      autoFocus: autoFocus
    }, /*#__PURE__*/_react.createElement(ElementType, _babelRuntimeHelpersEsmExtends({}, mergeProps(filterDOMProps(otherProps), buttonProps), {
      ref: domRef,
      className: classNames($e2dbe016cb19133f62d856e63d9aeb$$interop$default, 'spectrum-FieldButton', {
        'spectrum-FieldButton--quiet': isQuiet,
        'is-active': isActive || isPressed,
        'is-disabled': isDisabled,
        'is-invalid': validationState === 'invalid'
      }, styleProps.className)
    }), /*#__PURE__*/_react.createElement(SlotProvider, {
      slots: {
        icon: {
          size: 'S',
          UNSAFE_className: classNames($e2dbe016cb19133f62d856e63d9aeb$$interop$default, 'spectrum-Icon')
        }
      }
    }, children)))
  );
}

export let FieldButton = _react.forwardRef($f81b3f6796ef85c98d1b23c2911633$var$FieldButton);

function $f5efb88bdb075ace34ed6c0ed786405$var$LogicButton(props, ref) {
  props = useProviderProps(props);

  let {
    elementType: ElementType = 'button',
    variant,
    children,
    isDisabled,
    autoFocus
  } = props,
      otherProps = _babelRuntimeHelpersEsmObjectWithoutProperties(props, ["elementType", "variant", "children", "isDisabled", "autoFocus"]);

  let domRef = useFocusableRef(ref);
  let {
    buttonProps,
    isPressed
  } = useButton(props, domRef);
  let {
    styleProps
  } = useStyleProps(otherProps);
  return (/*#__PURE__*/_react.createElement(FocusRing, {
      focusRingClass: classNames($e2dbe016cb19133f62d856e63d9aeb$$interop$default, 'focus-ring'),
      autoFocus: autoFocus
    }, /*#__PURE__*/_react.createElement(ElementType, _babelRuntimeHelpersEsmExtends({}, filterDOMProps(otherProps), styleProps, buttonProps, {
      ref: domRef,
      className: classNames($e2dbe016cb19133f62d856e63d9aeb$$interop$default, 'spectrum-LogicButton', {
        ["spectrum-LogicButton--".concat(variant)]: variant,
        'is-disabled': isDisabled,
        'is-active': isPressed
      }, styleProps.className)
    }), /*#__PURE__*/_react.createElement("span", {
      className: classNames($e2dbe016cb19133f62d856e63d9aeb$$interop$default, 'spectrum-Button-label')
    }, children)))
  );
}
/**
 * A LogicButton displays an operator within a boolean logic sequence.
 */


export let LogicButton = _react.forwardRef($f5efb88bdb075ace34ed6c0ed786405$var$LogicButton);

function $ad5b11671fbc388aa7444fea2849f982$var$ClearButton(props, ref) {
  let {
    children = /*#__PURE__*/_react.createElement(_spectrumIconsUiCrossSmall, null),
    focusClassName,
    variant,
    autoFocus
  } = props,
      otherProps = _babelRuntimeHelpersEsmObjectWithoutProperties(props, ["children", "focusClassName", "variant", "autoFocus"]);

  let domRef = useFocusableRef(ref);
  let {
    buttonProps,
    isPressed
  } = useButton(props, domRef);
  let {
    styleProps
  } = useStyleProps(otherProps);
  return (/*#__PURE__*/_react.createElement(FocusRing, {
      focusRingClass: classNames($e2dbe016cb19133f62d856e63d9aeb$$interop$default, 'focus-ring', focusClassName),
      autoFocus: autoFocus
    }, /*#__PURE__*/_react.createElement("button", _babelRuntimeHelpersEsmExtends({}, filterDOMProps(otherProps), styleProps, buttonProps, {
      ref: domRef,
      className: classNames($e2dbe016cb19133f62d856e63d9aeb$$interop$default, 'spectrum-ClearButton', {
        ["spectrum-ClearButton--".concat(variant)]: variant,
        'is-active': isPressed
      }, styleProps.className)
    }), children))
  );
}

export let ClearButton = _react.forwardRef($ad5b11671fbc388aa7444fea2849f982$var$ClearButton);