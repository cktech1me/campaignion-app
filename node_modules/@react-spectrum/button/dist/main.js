require("./main.css");

var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));

var _babelRuntimeHelpersObjectWithoutProperties = $parcel$interopDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _temp = require("@react-spectrum/utils");

var classNames = _temp.classNames;
var filterDOMProps = _temp.filterDOMProps;
var SlotProvider = _temp.SlotProvider;
var useFocusableRef = _temp.useFocusableRef;
var useSlotProps = _temp.useSlotProps;
var useStyleProps = _temp.useStyleProps;

var FocusRing = require("@react-aria/focus").FocusRing;

var _react = $parcel$interopDefault(require("react"));

var Text = require("@react-spectrum/typography").Text;

var useButton = require("@react-aria/button").useButton;

var useProviderProps = require("@react-spectrum/provider").useProviderProps;

var _spectrumIconsUiCornerTriangle = $parcel$interopDefault(require("@spectrum-icons/ui/CornerTriangle"));

var mergeProps = require("@react-aria/utils").mergeProps;

var _babelRuntimeHelpersDefineProperty = $parcel$interopDefault(require("@babel/runtime/helpers/defineProperty"));

var _spectrumIconsUiCrossSmall = $parcel$interopDefault(require("@spectrum-icons/ui/CrossSmall"));

function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}

// ASSET: /Users/govett/dev/react-spectrum/node_modules/@adobe/spectrum-css-temp/components/button/vars.css
var $bb660483c36cbcc93b4e6ad249eee27a$exports = {};
$bb660483c36cbcc93b4e6ad249eee27a$exports = {
  "spectrum-Button": "_spectrum-Button_7a30f",
  "spectrum-ActionButton": "_spectrum-ActionButton_7a30f",
  "spectrum-LogicButton": "_spectrum-LogicButton_7a30f",
  "spectrum-FieldButton": "_spectrum-FieldButton_7a30f",
  "spectrum-ClearButton": "_spectrum-ClearButton_7a30f",
  "spectrum-Icon": "_spectrum-Icon_7a30f",
  "spectrum-Button-label": "_spectrum-Button-label_7a30f",
  "spectrum-ActionButton-label": "_spectrum-ActionButton-label_7a30f",
  "spectrum-ActionButton-hold": "_spectrum-ActionButton-hold_7a30f",
  "spectrum-ActionButton--quiet": "_spectrum-ActionButton--quiet_7a30f",
  "is-disabled": "_is-disabled_7a30f",
  "is-open": "_is-open_7a30f",
  "spectrum-FieldButton--quiet": "_spectrum-FieldButton--quiet_7a30f",
  "spectrum-ClearButton--small": "_spectrum-ClearButton--small_7a30f",
  "spectrum-ButtonGroup--vertical": "_spectrum-ButtonGroup--vertical_7a30f",
  "spectrum-ButtonGroup-item": "_spectrum-ButtonGroup-item_7a30f",
  "spectrum-ButtonGroup--connected": "_spectrum-ButtonGroup--connected_7a30f",
  "focus-ring": "_focus-ring_7a30f",
  "spectrum-ActionButton--emphasized": "_spectrum-ActionButton--emphasized_7a30f",
  "is-selected": "_is-selected_7a30f",
  "spectrum-ButtonGroup--justified": "_spectrum-ButtonGroup--justified_7a30f",
  "is-active": "_is-active_7a30f",
  "spectrum-Button--cta": "_spectrum-Button--cta_7a30f",
  "spectrum-Button--primary": "_spectrum-Button--primary_7a30f",
  "spectrum-Button--secondary": "_spectrum-Button--secondary_7a30f",
  "spectrum-Button--warning": "_spectrum-Button--warning_7a30f",
  "spectrum-Button--overBackground": "_spectrum-Button--overBackground_7a30f",
  "spectrum-Button--quiet": "_spectrum-Button--quiet_7a30f",
  "spectrum-ClearButton--overBackground": "_spectrum-ClearButton--overBackground_7a30f",
  "spectrum-LogicButton--and": "_spectrum-LogicButton--and_7a30f",
  "spectrum-LogicButton--or": "_spectrum-LogicButton--or_7a30f",
  "is-focused": "_is-focused_7a30f",
  "is-placeholder": "_is-placeholder_7a30f",
  "is-invalid": "_is-invalid_7a30f"
};
// todo: CSS hasn't caught up yet, map
var $f8b1fb7c3530bce84cf4ef291c5a5d2b$var$VARIANT_MAPPING = {
  negative: 'warning'
};
var $bb660483c36cbcc93b4e6ad249eee27a$$interop$default = $parcel$interopDefault($bb660483c36cbcc93b4e6ad249eee27a$exports);

function $f8b1fb7c3530bce84cf4ef291c5a5d2b$var$Button(props, ref) {
  props = useProviderProps(props);
  props = useSlotProps(props, 'button');

  var _props = props,
      _props$elementType = _props.elementType,
      ElementType = _props$elementType === void 0 ? 'button' : _props$elementType,
      children = _props.children,
      variant = _props.variant,
      isQuiet = _props.isQuiet,
      isDisabled = _props.isDisabled,
      autoFocus = _props.autoFocus,
      otherProps = _babelRuntimeHelpersObjectWithoutProperties(_props, ["elementType", "children", "variant", "isQuiet", "isDisabled", "autoFocus"]);

  var domRef = useFocusableRef(ref);

  var _useButton = useButton(props, domRef),
      buttonProps = _useButton.buttonProps,
      isPressed = _useButton.isPressed;

  var _useStyleProps = useStyleProps(otherProps),
      styleProps = _useStyleProps.styleProps;

  var buttonVariant = variant;

  if ($f8b1fb7c3530bce84cf4ef291c5a5d2b$var$VARIANT_MAPPING[variant]) {
    buttonVariant = $f8b1fb7c3530bce84cf4ef291c5a5d2b$var$VARIANT_MAPPING[variant];
  }

  return (/*#__PURE__*/_react.createElement(FocusRing, {
      focusRingClass: classNames($bb660483c36cbcc93b4e6ad249eee27a$$interop$default, 'focus-ring'),
      autoFocus: autoFocus
    }, /*#__PURE__*/_react.createElement(ElementType, _babelRuntimeHelpersExtends({}, filterDOMProps(otherProps), styleProps, buttonProps, {
      ref: domRef,
      className: classNames($bb660483c36cbcc93b4e6ad249eee27a$$interop$default, 'spectrum-Button', "spectrum-Button--".concat(buttonVariant), {
        'spectrum-Button--quiet': isQuiet,
        'is-disabled': isDisabled,
        'is-active': isPressed
      }, styleProps.className)
    }), /*#__PURE__*/_react.createElement(SlotProvider, {
      slots: {
        icon: {
          size: 'S',
          UNSAFE_className: classNames($bb660483c36cbcc93b4e6ad249eee27a$$interop$default, 'spectrum-Icon')
        },
        text: {
          UNSAFE_className: classNames($bb660483c36cbcc93b4e6ad249eee27a$$interop$default, 'spectrum-Button-label')
        }
      }
    }, typeof children === 'string' ? /*#__PURE__*/_react.createElement(Text, null, children) : children)))
  );
}
/**
 * Buttons allow users to perform an action or to navigate to another page.
 * They have multiple styles for various needs, and are ideal for calling attention to
 * where a user needs to do something in order to move forward in a flow.
 */


var Button = _react.forwardRef($f8b1fb7c3530bce84cf4ef291c5a5d2b$var$Button);

exports.Button = Button;

function $dceac885794bedfa84d2853397$var$ActionButton(props, ref) {
  props = useProviderProps(props);

  var _props = props,
      _props$elementType = _props.elementType,
      ElementType = _props$elementType === void 0 ? 'button' : _props$elementType,
      isQuiet = _props.isQuiet,
      isSelected = _props.isSelected,
      isDisabled = _props.isDisabled,
      isEmphasized = _props.isEmphasized,
      children = _props.children,
      holdAffordance = _props.holdAffordance,
      autoFocus = _props.autoFocus,
      otherProps = _babelRuntimeHelpersObjectWithoutProperties(_props, ["elementType", "isQuiet", "isSelected", "isDisabled", "isEmphasized", "children", "holdAffordance", "autoFocus"]);

  var domRef = useFocusableRef(ref);

  var _useButton = useButton(props, domRef),
      buttonProps = _useButton.buttonProps,
      isPressed = _useButton.isPressed;

  var _useStyleProps = useStyleProps(otherProps),
      styleProps = _useStyleProps.styleProps;

  return (/*#__PURE__*/_react.createElement(FocusRing, {
      focusRingClass: classNames($bb660483c36cbcc93b4e6ad249eee27a$$interop$default, 'focus-ring'),
      autoFocus: autoFocus
    }, /*#__PURE__*/_react.createElement(ElementType, _babelRuntimeHelpersExtends({}, filterDOMProps(otherProps), styleProps, buttonProps, {
      ref: domRef,
      className: classNames($bb660483c36cbcc93b4e6ad249eee27a$$interop$default, 'spectrum-ActionButton', {
        'spectrum-ActionButton--quiet': isQuiet,
        'spectrum-ActionButton--emphasized': isEmphasized,
        'is-active': isPressed,
        'is-selected': isSelected,
        'is-disabled': isDisabled
      }, styleProps.className)
    }), holdAffordance && /*#__PURE__*/_react.createElement(_spectrumIconsUiCornerTriangle, {
      UNSAFE_className: classNames($bb660483c36cbcc93b4e6ad249eee27a$$interop$default, 'spectrum-ActionButton-hold')
    }), /*#__PURE__*/_react.createElement(SlotProvider, {
      slots: {
        icon: {
          size: 'S',
          UNSAFE_className: classNames($bb660483c36cbcc93b4e6ad249eee27a$$interop$default, 'spectrum-Icon')
        },
        text: {
          UNSAFE_className: classNames($bb660483c36cbcc93b4e6ad249eee27a$$interop$default, 'spectrum-ActionButton-label')
        }
      }
    }, typeof children === 'string' ? /*#__PURE__*/_react.createElement(Text, null, children) : children)))
  );
}
/**
 * ActionButtons allow users to perform an action or mark a selection.
 * They’re used for similar, task-based options within a workflow, and are ideal for interfaces where buttons aren’t meant to draw a lot of attention.
 */


var ActionButton = _react.forwardRef($dceac885794bedfa84d2853397$var$ActionButton);

exports.ActionButton = ActionButton;

// @private
function $cf8ce16594782e9b3a191befa83c7de8$var$FieldButton(props, ref) {
  var _props$elementType = props.elementType,
      ElementType = _props$elementType === void 0 ? 'button' : _props$elementType,
      isQuiet = props.isQuiet,
      isDisabled = props.isDisabled,
      validationState = props.validationState,
      children = props.children,
      autoFocus = props.autoFocus,
      isActive = props.isActive,
      otherProps = _babelRuntimeHelpersObjectWithoutProperties(props, ["elementType", "isQuiet", "isDisabled", "validationState", "children", "autoFocus", "isActive"]);

  var domRef = useFocusableRef(ref);

  var _useButton = useButton(props, domRef),
      buttonProps = _useButton.buttonProps,
      isPressed = _useButton.isPressed;

  var _useStyleProps = useStyleProps(otherProps),
      styleProps = _useStyleProps.styleProps;

  return (/*#__PURE__*/_react.createElement(FocusRing, {
      focusRingClass: classNames($bb660483c36cbcc93b4e6ad249eee27a$$interop$default, 'focus-ring'),
      autoFocus: autoFocus
    }, /*#__PURE__*/_react.createElement(ElementType, _babelRuntimeHelpersExtends({}, mergeProps(filterDOMProps(otherProps), buttonProps), {
      ref: domRef,
      className: classNames($bb660483c36cbcc93b4e6ad249eee27a$$interop$default, 'spectrum-FieldButton', {
        'spectrum-FieldButton--quiet': isQuiet,
        'is-active': isActive || isPressed,
        'is-disabled': isDisabled,
        'is-invalid': validationState === 'invalid'
      }, styleProps.className)
    }), /*#__PURE__*/_react.createElement(SlotProvider, {
      slots: {
        icon: {
          size: 'S',
          UNSAFE_className: classNames($bb660483c36cbcc93b4e6ad249eee27a$$interop$default, 'spectrum-Icon')
        }
      }
    }, children)))
  );
}

var FieldButton = _react.forwardRef($cf8ce16594782e9b3a191befa83c7de8$var$FieldButton);

exports.FieldButton = FieldButton;

function $f2d8334fd13d907c7b9369681427bed7$var$LogicButton(props, ref) {
  var _classNames;

  props = useProviderProps(props);

  var _props = props,
      _props$elementType = _props.elementType,
      ElementType = _props$elementType === void 0 ? 'button' : _props$elementType,
      variant = _props.variant,
      children = _props.children,
      isDisabled = _props.isDisabled,
      autoFocus = _props.autoFocus,
      otherProps = _babelRuntimeHelpersObjectWithoutProperties(_props, ["elementType", "variant", "children", "isDisabled", "autoFocus"]);

  var domRef = useFocusableRef(ref);

  var _useButton = useButton(props, domRef),
      buttonProps = _useButton.buttonProps,
      isPressed = _useButton.isPressed;

  var _useStyleProps = useStyleProps(otherProps),
      styleProps = _useStyleProps.styleProps;

  return (/*#__PURE__*/_react.createElement(FocusRing, {
      focusRingClass: classNames($bb660483c36cbcc93b4e6ad249eee27a$$interop$default, 'focus-ring'),
      autoFocus: autoFocus
    }, /*#__PURE__*/_react.createElement(ElementType, _babelRuntimeHelpersExtends({}, filterDOMProps(otherProps), styleProps, buttonProps, {
      ref: domRef,
      className: classNames($bb660483c36cbcc93b4e6ad249eee27a$$interop$default, 'spectrum-LogicButton', (_classNames = {}, _babelRuntimeHelpersDefineProperty(_classNames, "spectrum-LogicButton--".concat(variant), variant), _babelRuntimeHelpersDefineProperty(_classNames, 'is-disabled', isDisabled), _babelRuntimeHelpersDefineProperty(_classNames, 'is-active', isPressed), _classNames), styleProps.className)
    }), /*#__PURE__*/_react.createElement("span", {
      className: classNames($bb660483c36cbcc93b4e6ad249eee27a$$interop$default, 'spectrum-Button-label')
    }, children)))
  );
}
/**
 * A LogicButton displays an operator within a boolean logic sequence.
 */


var LogicButton = _react.forwardRef($f2d8334fd13d907c7b9369681427bed7$var$LogicButton);

exports.LogicButton = LogicButton;

function $a080c0d4877eb327142a6e830045$var$ClearButton(props, ref) {
  var _classNames;

  var _props$children = props.children,
      children = _props$children === void 0 ? /*#__PURE__*/_react.createElement(_spectrumIconsUiCrossSmall, null) : _props$children,
      focusClassName = props.focusClassName,
      variant = props.variant,
      autoFocus = props.autoFocus,
      otherProps = _babelRuntimeHelpersObjectWithoutProperties(props, ["children", "focusClassName", "variant", "autoFocus"]);

  var domRef = useFocusableRef(ref);

  var _useButton = useButton(props, domRef),
      buttonProps = _useButton.buttonProps,
      isPressed = _useButton.isPressed;

  var _useStyleProps = useStyleProps(otherProps),
      styleProps = _useStyleProps.styleProps;

  return (/*#__PURE__*/_react.createElement(FocusRing, {
      focusRingClass: classNames($bb660483c36cbcc93b4e6ad249eee27a$$interop$default, 'focus-ring', focusClassName),
      autoFocus: autoFocus
    }, /*#__PURE__*/_react.createElement("button", _babelRuntimeHelpersExtends({}, filterDOMProps(otherProps), styleProps, buttonProps, {
      ref: domRef,
      className: classNames($bb660483c36cbcc93b4e6ad249eee27a$$interop$default, 'spectrum-ClearButton', (_classNames = {}, _babelRuntimeHelpersDefineProperty(_classNames, "spectrum-ClearButton--".concat(variant), variant), _babelRuntimeHelpersDefineProperty(_classNames, 'is-active', isPressed), _classNames), styleProps.className)
    }), children))
  );
}

var ClearButton = _react.forwardRef($a080c0d4877eb327142a6e830045$var$ClearButton);

exports.ClearButton = ClearButton;