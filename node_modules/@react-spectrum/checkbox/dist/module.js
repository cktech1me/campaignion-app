import "./main.css";
import _babelRuntimeHelpersEsmExtends from "@babel/runtime/helpers/esm/extends";
import _babelRuntimeHelpersEsmObjectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _spectrumIconsUiCheckmarkSmall from "@spectrum-icons/ui/CheckmarkSmall";
import { classNames, filterDOMProps, useFocusableRef, useStyleProps } from "@react-spectrum/utils";
import _spectrumIconsUiDashSmall from "@spectrum-icons/ui/DashSmall";
import { FocusRing } from "@react-aria/focus";
import _react, { forwardRef, useRef } from "react";
import { useCheckbox } from "@react-aria/checkbox";
import { useProviderProps } from "@react-spectrum/provider";
import { useToggleState } from "@react-stately/toggle";

function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}

// ASSET: /Users/govett/dev/react-spectrum/node_modules/@adobe/spectrum-css-temp/components/checkbox/vars.css
var $fe5a53e0f5b3884bdef087f6ebedfaff$exports = {};
$fe5a53e0f5b3884bdef087f6ebedfaff$exports = {
  "spectrum-Checkbox": "_spectrum-Checkbox_21b0f",
  "spectrum-Checkbox-input": "_spectrum-Checkbox-input_21b0f",
  "spectrum-Checkbox-box": "_spectrum-Checkbox-box_21b0f",
  "spectrum-Checkbox-checkmark": "_spectrum-Checkbox-checkmark_21b0f",
  "is-indeterminate": "_is-indeterminate_21b0f",
  "spectrum-Checkbox-partialCheckmark": "_spectrum-Checkbox-partialCheckmark_21b0f",
  "spectrum-Checkbox-label": "_spectrum-Checkbox-label_21b0f",
  "focus-ring": "_focus-ring_21b0f",
  "spectrum-Checkbox--quiet": "_spectrum-Checkbox--quiet_21b0f",
  "is-invalid": "_is-invalid_21b0f"
};
var $fe5a53e0f5b3884bdef087f6ebedfaff$$interop$default = $parcel$interopDefault($fe5a53e0f5b3884bdef087f6ebedfaff$exports);

function $cce8d64aa47c4e476f1efead1555ff25$var$Checkbox(props, ref) {
  props = useProviderProps(props);

  let {
    isIndeterminate = false,
    isEmphasized = false,
    isDisabled = false,
    autoFocus,
    children
  } = props,
      otherProps = _babelRuntimeHelpersEsmObjectWithoutProperties(props, ["isIndeterminate", "isEmphasized", "isDisabled", "autoFocus", "children"]);

  let {
    styleProps
  } = useStyleProps(otherProps);
  let inputRef = useRef(null);
  let domRef = useFocusableRef(ref, inputRef);
  let state = useToggleState(props);
  let {
    inputProps
  } = useCheckbox(props, state, inputRef);
  let markIcon = isIndeterminate ? /*#__PURE__*/_react.createElement(_spectrumIconsUiDashSmall, {
    UNSAFE_className: classNames($fe5a53e0f5b3884bdef087f6ebedfaff$$interop$default, 'spectrum-Checkbox-partialCheckmark')
  }) : /*#__PURE__*/_react.createElement(_spectrumIconsUiCheckmarkSmall, {
    UNSAFE_className: classNames($fe5a53e0f5b3884bdef087f6ebedfaff$$interop$default, 'spectrum-Checkbox-checkmark')
  });
  return (/*#__PURE__*/_react.createElement("label", _babelRuntimeHelpersEsmExtends({}, filterDOMProps(otherProps, {
      'aria-label': false
    }), styleProps, {
      ref: domRef,
      className: classNames($fe5a53e0f5b3884bdef087f6ebedfaff$$interop$default, 'spectrum-Checkbox', {
        'is-indeterminate': isIndeterminate,
        'spectrum-Checkbox--quiet': !isEmphasized,
        'is-invalid': inputProps['aria-invalid'],
        'is-disabled': isDisabled
      }, styleProps.className)
    }), /*#__PURE__*/_react.createElement(FocusRing, {
      focusRingClass: classNames($fe5a53e0f5b3884bdef087f6ebedfaff$$interop$default, 'focus-ring'),
      autoFocus: autoFocus
    }, /*#__PURE__*/_react.createElement("input", _babelRuntimeHelpersEsmExtends({}, inputProps, {
      ref: inputRef,
      className: classNames($fe5a53e0f5b3884bdef087f6ebedfaff$$interop$default, 'spectrum-Checkbox-input')
    }))), /*#__PURE__*/_react.createElement("span", {
      className: classNames($fe5a53e0f5b3884bdef087f6ebedfaff$$interop$default, 'spectrum-Checkbox-box')
    }, markIcon), children && /*#__PURE__*/_react.createElement("span", {
      className: classNames($fe5a53e0f5b3884bdef087f6ebedfaff$$interop$default, 'spectrum-Checkbox-label')
    }, children))
  );
}
/**
 * Checkboxes allow users to select multiple items from a list of individual items,
 * or to mark one individual item as selected.
 */


export let Checkbox = forwardRef($cce8d64aa47c4e476f1efead1555ff25$var$Checkbox);