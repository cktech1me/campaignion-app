require("./main.css");

var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));

var _babelRuntimeHelpersObjectWithoutProperties = $parcel$interopDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _temp = require("@react-aria/utils");

var chain = _temp.chain;
var mergeProps = _temp.mergeProps;

var _react2 = require("react");

var _react = $parcel$interopDefault(_react2);

var useRef = _react2.useRef;
var cloneElement = _react2.cloneElement;
var forwardRef = _react2.forwardRef;
var useImperativeHandle = _react2.useImperativeHandle;

var _babelRuntimeHelpersObjectSpread = $parcel$interopDefault(require("@babel/runtime/helpers/objectSpread2"));

var _spectrumIconsUiAlertMedium = $parcel$interopDefault(require("@spectrum-icons/ui/AlertMedium"));

var _spectrumIconsUiCheckmarkMedium = $parcel$interopDefault(require("@spectrum-icons/ui/CheckmarkMedium"));

var _temp2 = require("@react-spectrum/utils");

var classNames = _temp2.classNames;
var createFocusableRef = _temp2.createFocusableRef;
var filterDOMProps = _temp2.filterDOMProps;
var TextInputDOMPropNames = _temp2.TextInputDOMPropNames;
var useStyleProps = _temp2.useStyleProps;

var FocusRing = require("@react-aria/focus").FocusRing;

var Label = require("@react-spectrum/label").Label;

var useFormProps = require("@react-spectrum/form").useFormProps;

var useProviderProps = require("@react-spectrum/provider").useProviderProps;

var useTextField = require("@react-aria/textfield").useTextField;

function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}

// ASSET: /Users/govett/dev/react-spectrum/node_modules/@adobe/spectrum-css-temp/components/fieldlabel/vars.css
var $ce2ba76b00945bd966a5f95584cdaaee$exports = {};
$ce2ba76b00945bd966a5f95584cdaaee$exports = {
  "spectrum-FieldLabel": "_spectrum-FieldLabel_3fb22",
  "spectrum-FieldLabel--positionSide": "_spectrum-FieldLabel--positionSide_3fb22",
  "spectrum-FieldLabel-requiredIcon": "_spectrum-FieldLabel-requiredIcon_3fb22",
  "spectrum-FieldLabel--alignEnd": "_spectrum-FieldLabel--alignEnd_3fb22",
  "spectrum-Field": "_spectrum-Field_3fb22",
  "spectrum-Field--positionTop": "_spectrum-Field--positionTop_3fb22",
  "spectrum-Field-field": "_spectrum-Field-field_3fb22",
  "spectrum-Field--positionSide": "_spectrum-Field--positionSide_3fb22",
  "spectrum-Form": "_spectrum-Form_3fb22",
  "spectrum-Form--positionSide": "_spectrum-Form--positionSide_3fb22",
  "spectrum-Form--positionTop": "_spectrum-Form--positionTop_3fb22",
  "spectrum-Form-itemLabel": "_spectrum-Form-itemLabel_3fb22",
  "is-disabled": "_is-disabled_3fb22"
};
// ASSET: /Users/govett/dev/react-spectrum/node_modules/@adobe/spectrum-css-temp/components/textfield/vars.css
var $ac5b21bd111eceb2d3ffa70768b760$exports = {};
$ac5b21bd111eceb2d3ffa70768b760$exports = {
  "spectrum-Textfield": "_spectrum-Textfield_f79ce",
  "spectrum-Textfield--quiet": "_spectrum-Textfield--quiet_f79ce",
  "spectrum-Textfield--multiline": "_spectrum-Textfield--multiline_f79ce",
  "spectrum-Textfield-input": "_spectrum-Textfield-input_f79ce",
  "is-valid": "_is-valid_f79ce",
  "is-invalid": "_is-invalid_f79ce",
  "spectrum-Textfield-validationIcon": "_spectrum-Textfield-validationIcon_f79ce",
  "spectrum-Textfield-icon": "_spectrum-Textfield-icon_f79ce",
  "spectrum-Textfield-inputIcon": "_spectrum-Textfield-inputIcon_f79ce",
  "is-focused": "_is-focused_f79ce",
  "focus-ring": "_focus-ring_f79ce",
  "is-disabled": "_is-disabled_f79ce",
  "disabled": "_disabled_f79ce"
};
var $ac5b21bd111eceb2d3ffa70768b760$$interop$default = $parcel$interopDefault($ac5b21bd111eceb2d3ffa70768b760$exports);
var $ce2ba76b00945bd966a5f95584cdaaee$$interop$default = $parcel$interopDefault($ce2ba76b00945bd966a5f95584cdaaee$exports);

function $bbeef48dc0114f0ff3dfec974b1db037$var$TextFieldBase(props, ref) {
  props = useProviderProps(props);
  props = useFormProps(props);

  var _props = props,
      label = _props.label,
      _props$labelPosition = _props.labelPosition,
      labelPosition = _props$labelPosition === void 0 ? 'top' : _props$labelPosition,
      labelAlign = _props.labelAlign,
      isRequired = _props.isRequired,
      necessityIndicator = _props.necessityIndicator,
      validationState = _props.validationState,
      icon = _props.icon,
      _props$isQuiet = _props.isQuiet,
      isQuiet = _props$isQuiet === void 0 ? false : _props$isQuiet,
      multiLine = _props.multiLine,
      _props$isDisabled = _props.isDisabled,
      isDisabled = _props$isDisabled === void 0 ? false : _props$isDisabled,
      value = _props.value,
      defaultValue = _props.defaultValue,
      autoFocus = _props.autoFocus,
      inputClassName = _props.inputClassName,
      wrapperChildren = _props.wrapperChildren,
      otherProps = _babelRuntimeHelpersObjectWithoutProperties(_props, ["label", "labelPosition", "labelAlign", "isRequired", "necessityIndicator", "validationState", "icon", "isQuiet", "multiLine", "isDisabled", "value", "defaultValue", "autoFocus", "inputClassName", "wrapperChildren"]);

  var domRef = useRef(null);
  var inputRef = useRef(null); // Expose imperative interface for ref

  useImperativeHandle(ref, function () {
    return _babelRuntimeHelpersObjectSpread({}, createFocusableRef(domRef, inputRef), {
      select: function select() {
        if (inputRef.current) {
          inputRef.current.select();
        }
      },
      getInputElement: function getInputElement() {
        return inputRef.current;
      }
    });
  });

  var _useStyleProps = useStyleProps(otherProps),
      styleProps = _useStyleProps.styleProps;

  var _useTextField = useTextField(props, inputRef),
      labelProps = _useTextField.labelProps,
      textFieldProps = _useTextField.textFieldProps;

  var ElementType = multiLine ? 'textarea' : 'input';
  var isInvalid = validationState === 'invalid';

  if (icon) {
    var UNSAFE_className = classNames($ac5b21bd111eceb2d3ffa70768b760$$interop$default, {
      'disabled': isDisabled
    }, icon.props && icon.props.UNSAFE_className, 'spectrum-Textfield-icon');
    icon = cloneElement(icon, {
      UNSAFE_className: UNSAFE_className,
      size: 'S'
    });
  }

  var validationIcon = isInvalid ? /*#__PURE__*/_react.createElement(_spectrumIconsUiAlertMedium, null) : /*#__PURE__*/_react.createElement(_spectrumIconsUiCheckmarkMedium, null);
  var validation = cloneElement(validationIcon, {
    UNSAFE_className: classNames($ac5b21bd111eceb2d3ffa70768b760$$interop$default, 'spectrum-Textfield-validationIcon', {
      'is-invalid': isInvalid,
      'is-valid': validationState === 'valid'
    })
  });

  var textField = /*#__PURE__*/_react.createElement("div", {
    className: classNames($ac5b21bd111eceb2d3ffa70768b760$$interop$default, 'spectrum-Textfield', {
      'is-invalid': isInvalid,
      'is-valid': validationState === 'valid',
      'spectrum-Textfield--quiet': isQuiet,
      'spectrum-Textfield--multiline': multiLine
    })
  }, /*#__PURE__*/_react.createElement(FocusRing, {
    focusRingClass: classNames($ac5b21bd111eceb2d3ffa70768b760$$interop$default, 'focus-ring'),
    isTextInput: true,
    autoFocus: autoFocus
  }, /*#__PURE__*/_react.createElement(ElementType, _babelRuntimeHelpersExtends({}, mergeProps(textFieldProps, filterDOMProps(otherProps, TextInputDOMPropNames)), {
    ref: inputRef,
    value: value,
    defaultValue: defaultValue,
    rows: multiLine ? 1 : undefined,
    className: classNames($ac5b21bd111eceb2d3ffa70768b760$$interop$default, 'spectrum-Textfield-input', {
      'spectrum-Textfield-inputIcon': icon
    }, inputClassName)
  }))), icon, validationState ? validation : null, wrapperChildren);

  if (label) {
    var labelWrapperClass = classNames($ce2ba76b00945bd966a5f95584cdaaee$$interop$default, 'spectrum-Field', {
      'spectrum-Field--positionTop': labelPosition === 'top',
      'spectrum-Field--positionSide': labelPosition === 'side'
    }, styleProps.className);
    textField = _react.cloneElement(textField, mergeProps(textField.props, {
      className: classNames($ce2ba76b00945bd966a5f95584cdaaee$$interop$default, 'spectrum-Field-field')
    }));
    return (/*#__PURE__*/_react.createElement("div", _babelRuntimeHelpersExtends({}, styleProps, {
        ref: domRef,
        className: labelWrapperClass
      }), /*#__PURE__*/_react.createElement(Label, _babelRuntimeHelpersExtends({}, labelProps, {
        labelPosition: labelPosition,
        labelAlign: labelAlign,
        isRequired: isRequired,
        necessityIndicator: necessityIndicator
      }), label), textField)
    );
  }

  return _react.cloneElement(textField, mergeProps(textField.props, _babelRuntimeHelpersObjectSpread({}, styleProps, {
    ref: domRef
  })));
}

var TextFieldBase = forwardRef($bbeef48dc0114f0ff3dfec974b1db037$var$TextFieldBase);
exports.TextFieldBase = TextFieldBase;

function $b15c452dc8e74a73908804ba2bd6124a$var$TextArea(props, ref) {
  props = useProviderProps(props);

  var _props = props,
      _props$isDisabled = _props.isDisabled,
      isDisabled = _props$isDisabled === void 0 ? false : _props$isDisabled,
      _props$isQuiet = _props.isQuiet,
      isQuiet = _props$isQuiet === void 0 ? false : _props$isQuiet,
      _props$isReadOnly = _props.isReadOnly,
      isReadOnly = _props$isReadOnly === void 0 ? false : _props$isReadOnly,
      _props$isRequired = _props.isRequired,
      isRequired = _props$isRequired === void 0 ? false : _props$isRequired,
      onChange = _props.onChange,
      otherProps = _babelRuntimeHelpersObjectWithoutProperties(_props, ["isDisabled", "isQuiet", "isReadOnly", "isRequired", "onChange"]);

  var textfieldRef = useRef(null);
  textfieldRef = ref || textfieldRef;

  var onHeightChange = function onHeightChange() {
    if (isQuiet) {
      var input = textfieldRef.current.getInputElement();
      input.style.height = 'auto';
      input.style.height = "".concat(input.scrollHeight, "px");
    }
  };

  return (/*#__PURE__*/_react.createElement(TextFieldBase, _babelRuntimeHelpersExtends({}, otherProps, {
      ref: textfieldRef,
      multiLine: true,
      isDisabled: isDisabled,
      isQuiet: isQuiet,
      isReadOnly: isReadOnly,
      isRequired: isRequired,
      onChange: chain(onChange, onHeightChange)
    }))
  );
}
/**
 * Text areas are multiline text inputs, useful for cases where users have 
 * a sizable amount of text to enter. They allow for all customizations that
 * are available to text fields.
 */


var TextArea = _react.forwardRef($b15c452dc8e74a73908804ba2bd6124a$var$TextArea);

exports.TextArea = TextArea;

function $c2f329a3dd948566fdba46fb0c6306be$var$TextField(props, ref) {
  return (/*#__PURE__*/_react.createElement(TextFieldBase, _babelRuntimeHelpersExtends({}, props, {
      ref: ref
    }))
  );
}
/**
 * Text fields are text inputs that allow users to input custom text entries
 * with a keyboard. Various decorations can be displayed around the field to 
 * communicate the entry requirements.
 */


var TextField = forwardRef($c2f329a3dd948566fdba46fb0c6306be$var$TextField);
exports.TextField = TextField;