import "./main.css";
import _babelRuntimeHelpersEsmExtends from "@babel/runtime/helpers/esm/extends";
import _babelRuntimeHelpersEsmObjectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import { chain, mergeProps } from "@react-aria/utils";
import _react, { useRef, cloneElement, forwardRef, useImperativeHandle } from "react";
import _babelRuntimeHelpersEsmObjectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _spectrumIconsUiAlertMedium from "@spectrum-icons/ui/AlertMedium";
import _spectrumIconsUiCheckmarkMedium from "@spectrum-icons/ui/CheckmarkMedium";
import { classNames, createFocusableRef, filterDOMProps, TextInputDOMPropNames, useStyleProps } from "@react-spectrum/utils";
import { FocusRing } from "@react-aria/focus";
import { Label } from "@react-spectrum/label";
import { useFormProps } from "@react-spectrum/form";
import { useProviderProps } from "@react-spectrum/provider";
import { useTextField } from "@react-aria/textfield";

function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}

// ASSET: /Users/govett/dev/react-spectrum/node_modules/@adobe/spectrum-css-temp/components/fieldlabel/vars.css
var $c356388cc3519f2d617e9a5ee79a$exports = {};
$c356388cc3519f2d617e9a5ee79a$exports = {
  "spectrum-FieldLabel": "_spectrum-FieldLabel_3fb22",
  "spectrum-FieldLabel--positionSide": "_spectrum-FieldLabel--positionSide_3fb22",
  "spectrum-FieldLabel-requiredIcon": "_spectrum-FieldLabel-requiredIcon_3fb22",
  "spectrum-FieldLabel--alignEnd": "_spectrum-FieldLabel--alignEnd_3fb22",
  "spectrum-Field": "_spectrum-Field_3fb22",
  "spectrum-Field--positionTop": "_spectrum-Field--positionTop_3fb22",
  "spectrum-Field-field": "_spectrum-Field-field_3fb22",
  "spectrum-Field--positionSide": "_spectrum-Field--positionSide_3fb22",
  "spectrum-Form": "_spectrum-Form_3fb22",
  "spectrum-Form--positionSide": "_spectrum-Form--positionSide_3fb22",
  "spectrum-Form--positionTop": "_spectrum-Form--positionTop_3fb22",
  "spectrum-Form-itemLabel": "_spectrum-Form-itemLabel_3fb22",
  "is-disabled": "_is-disabled_3fb22"
};
// ASSET: /Users/govett/dev/react-spectrum/node_modules/@adobe/spectrum-css-temp/components/textfield/vars.css
var $c3cdee0d9381831b0b3e57cec3e30$exports = {};
$c3cdee0d9381831b0b3e57cec3e30$exports = {
  "spectrum-Textfield": "_spectrum-Textfield_f79ce",
  "spectrum-Textfield--quiet": "_spectrum-Textfield--quiet_f79ce",
  "spectrum-Textfield--multiline": "_spectrum-Textfield--multiline_f79ce",
  "spectrum-Textfield-input": "_spectrum-Textfield-input_f79ce",
  "is-valid": "_is-valid_f79ce",
  "is-invalid": "_is-invalid_f79ce",
  "spectrum-Textfield-validationIcon": "_spectrum-Textfield-validationIcon_f79ce",
  "spectrum-Textfield-icon": "_spectrum-Textfield-icon_f79ce",
  "spectrum-Textfield-inputIcon": "_spectrum-Textfield-inputIcon_f79ce",
  "is-focused": "_is-focused_f79ce",
  "focus-ring": "_focus-ring_f79ce",
  "is-disabled": "_is-disabled_f79ce",
  "disabled": "_disabled_f79ce"
};
var $c3cdee0d9381831b0b3e57cec3e30$$interop$default = $parcel$interopDefault($c3cdee0d9381831b0b3e57cec3e30$exports);
var $c356388cc3519f2d617e9a5ee79a$$interop$default = $parcel$interopDefault($c356388cc3519f2d617e9a5ee79a$exports);

function $c1f94f79922855bf9557f1dec0$var$TextFieldBase(props, ref) {
  props = useProviderProps(props);
  props = useFormProps(props);

  let {
    label,
    labelPosition = 'top',
    labelAlign,
    isRequired,
    necessityIndicator,
    validationState,
    icon,
    isQuiet = false,
    multiLine,
    isDisabled = false,
    value,
    defaultValue,
    autoFocus,
    inputClassName,
    wrapperChildren
  } = props,
      otherProps = _babelRuntimeHelpersEsmObjectWithoutProperties(props, ["label", "labelPosition", "labelAlign", "isRequired", "necessityIndicator", "validationState", "icon", "isQuiet", "multiLine", "isDisabled", "value", "defaultValue", "autoFocus", "inputClassName", "wrapperChildren"]);

  let domRef = useRef(null);
  let inputRef = useRef(null); // Expose imperative interface for ref

  useImperativeHandle(ref, () => _babelRuntimeHelpersEsmObjectSpread({}, createFocusableRef(domRef, inputRef), {
    select() {
      if (inputRef.current) {
        inputRef.current.select();
      }
    },

    getInputElement() {
      return inputRef.current;
    }

  }));
  let {
    styleProps
  } = useStyleProps(otherProps);
  let {
    labelProps,
    textFieldProps
  } = useTextField(props, inputRef);
  let ElementType = multiLine ? 'textarea' : 'input';
  let isInvalid = validationState === 'invalid';

  if (icon) {
    let UNSAFE_className = classNames($c3cdee0d9381831b0b3e57cec3e30$$interop$default, {
      'disabled': isDisabled
    }, icon.props && icon.props.UNSAFE_className, 'spectrum-Textfield-icon');
    icon = cloneElement(icon, {
      UNSAFE_className,
      size: 'S'
    });
  }

  let validationIcon = isInvalid ? /*#__PURE__*/_react.createElement(_spectrumIconsUiAlertMedium, null) : /*#__PURE__*/_react.createElement(_spectrumIconsUiCheckmarkMedium, null);
  let validation = cloneElement(validationIcon, {
    UNSAFE_className: classNames($c3cdee0d9381831b0b3e57cec3e30$$interop$default, 'spectrum-Textfield-validationIcon', {
      'is-invalid': isInvalid,
      'is-valid': validationState === 'valid'
    })
  });

  let textField = /*#__PURE__*/_react.createElement("div", {
    className: classNames($c3cdee0d9381831b0b3e57cec3e30$$interop$default, 'spectrum-Textfield', {
      'is-invalid': isInvalid,
      'is-valid': validationState === 'valid',
      'spectrum-Textfield--quiet': isQuiet,
      'spectrum-Textfield--multiline': multiLine
    })
  }, /*#__PURE__*/_react.createElement(FocusRing, {
    focusRingClass: classNames($c3cdee0d9381831b0b3e57cec3e30$$interop$default, 'focus-ring'),
    isTextInput: true,
    autoFocus: autoFocus
  }, /*#__PURE__*/_react.createElement(ElementType, _babelRuntimeHelpersEsmExtends({}, mergeProps(textFieldProps, filterDOMProps(otherProps, TextInputDOMPropNames)), {
    ref: inputRef,
    value: value,
    defaultValue: defaultValue,
    rows: multiLine ? 1 : undefined,
    className: classNames($c3cdee0d9381831b0b3e57cec3e30$$interop$default, 'spectrum-Textfield-input', {
      'spectrum-Textfield-inputIcon': icon
    }, inputClassName)
  }))), icon, validationState ? validation : null, wrapperChildren);

  if (label) {
    let labelWrapperClass = classNames($c356388cc3519f2d617e9a5ee79a$$interop$default, 'spectrum-Field', {
      'spectrum-Field--positionTop': labelPosition === 'top',
      'spectrum-Field--positionSide': labelPosition === 'side'
    }, styleProps.className);
    textField = _react.cloneElement(textField, mergeProps(textField.props, {
      className: classNames($c356388cc3519f2d617e9a5ee79a$$interop$default, 'spectrum-Field-field')
    }));
    return (/*#__PURE__*/_react.createElement("div", _babelRuntimeHelpersEsmExtends({}, styleProps, {
        ref: domRef,
        className: labelWrapperClass
      }), /*#__PURE__*/_react.createElement(Label, _babelRuntimeHelpersEsmExtends({}, labelProps, {
        labelPosition: labelPosition,
        labelAlign: labelAlign,
        isRequired: isRequired,
        necessityIndicator: necessityIndicator
      }), label), textField)
    );
  }

  return _react.cloneElement(textField, mergeProps(textField.props, _babelRuntimeHelpersEsmObjectSpread({}, styleProps, {
    ref: domRef
  })));
}

export const TextFieldBase = forwardRef($c1f94f79922855bf9557f1dec0$var$TextFieldBase);

function $f89a6e22984bf37b0e695777a664a$var$TextArea(props, ref) {
  props = useProviderProps(props);

  let {
    isDisabled = false,
    isQuiet = false,
    isReadOnly = false,
    isRequired = false,
    onChange
  } = props,
      otherProps = _babelRuntimeHelpersEsmObjectWithoutProperties(props, ["isDisabled", "isQuiet", "isReadOnly", "isRequired", "onChange"]);

  let textfieldRef = useRef(null);
  textfieldRef = ref || textfieldRef;

  let onHeightChange = () => {
    if (isQuiet) {
      let input = textfieldRef.current.getInputElement();
      input.style.height = 'auto';
      input.style.height = "".concat(input.scrollHeight, "px");
    }
  };

  return (/*#__PURE__*/_react.createElement(TextFieldBase, _babelRuntimeHelpersEsmExtends({}, otherProps, {
      ref: textfieldRef,
      multiLine: true,
      isDisabled: isDisabled,
      isQuiet: isQuiet,
      isReadOnly: isReadOnly,
      isRequired: isRequired,
      onChange: chain(onChange, onHeightChange)
    }))
  );
}
/**
 * Text areas are multiline text inputs, useful for cases where users have 
 * a sizable amount of text to enter. They allow for all customizations that
 * are available to text fields.
 */


export let TextArea = _react.forwardRef($f89a6e22984bf37b0e695777a664a$var$TextArea);

function $e58697aec4eeed78333e584099e79$var$TextField(props, ref) {
  return (/*#__PURE__*/_react.createElement(TextFieldBase, _babelRuntimeHelpersEsmExtends({}, props, {
      ref: ref
    }))
  );
}
/**
 * Text fields are text inputs that allow users to input custom text entries
 * with a keyboard. Various decorations can be displayed around the field to 
 * communicate the entry requirements.
 */


export const TextField = forwardRef($e58697aec4eeed78333e584099e79$var$TextField);