import "./main.css";
import _babelRuntimeHelpersEsmExtends from "@babel/runtime/helpers/esm/extends";
import _babelRuntimeHelpersEsmObjectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _classnames from "classnames";
import { filterDOMProps, shouldKeepSpectrumClassNames, useDOMRef, useStyleProps, useMediaQuery } from "@react-spectrum/utils";
import { Provider as _Provider, useLocale } from "@react-aria/i18n";
import { ModalProvider, useModalProvider } from "@react-aria/overlays";
import _react, { useContext, useEffect } from "react";

function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
const $f647e0178bdc42fc3d79fa5$var$loadingTypekitIds = new Set();

function $f647e0178bdc42fc3d79fa5$export$default(typeKitId) {
  if (!typeKitId || $f647e0178bdc42fc3d79fa5$var$loadingTypekitIds.has(typeKitId)) {
    return;
  }

  $f647e0178bdc42fc3d79fa5$var$loadingTypekitIds.add(typeKitId);
  const config = {
    kitId: typeKitId,
    scriptTimeout: 3000
  };
  const h = document.getElementsByTagName('html')[0];
  h.className += ' wf-loading';
  const t = setTimeout(() => {
    h.className = h.className.replace(/(\s|^)wf-loading(\s|$)/g, ' ');
    h.className += ' wf-inactive';
  }, config.scriptTimeout);
  const tk = document.createElement('script');
  let d = false;
  tk.src = "https://use.typekit.net/".concat(config.kitId, ".js");
  tk.type = 'text/javascript';
  tk.async = 'true';

  tk.onload = tk.onreadystatechange = function onload() {
    const a = this.readyState;

    if (d || a && a !== 'complete' && a !== 'loaded') {
      return;
    }

    d = true;
    clearTimeout(t);

    try {
      window.Typekit.load(config);
    } catch (b) {
      /* empty */
    }
  };

  const s = document.getElementsByTagName('script')[0];
  s.parentNode.insertBefore(tk, s);
}

// ASSET: /Users/govett/dev/react-spectrum/node_modules/@adobe/spectrum-css-temp/components/page/vars.css
var $b5475d5dcfe4b4207518d367c05d169$exports = {};
$b5475d5dcfe4b4207518d367c05d169$exports = {
  "spectrum": "_spectrum_a958b"
};
// ASSET: /Users/govett/dev/react-spectrum/node_modules/@adobe/spectrum-css-temp/components/typography/index.css
var $f8ee1619a9e3731fcce290f252aaea5$exports = {};
$f8ee1619a9e3731fcce290f252aaea5$exports = {
  "spectrum": "_spectrum_5b535",
  "spectrum-Body": "_spectrum-Body_5b535",
  "spectrum-Body--italic": "_spectrum-Body--italic_5b535"
};

function $b51ec1a3cedfd27d29c956b270e96b5f$export$useColorScheme(theme, defaultColorScheme) {
  let matchesDark = useMediaQuery('(prefers-color-scheme: dark)');
  let matchesLight = useMediaQuery('(prefers-color-scheme: light)'); // importance OS > default > omitted

  if (theme.dark && matchesDark) {
    return 'dark';
  }

  if (theme.light && matchesLight) {
    return 'light';
  }

  if (theme.dark && defaultColorScheme === 'dark') {
    return 'dark';
  }

  if (theme.light && defaultColorScheme === 'light') {
    return 'light';
  }

  if (!theme.dark) {
    return 'light';
  }

  if (!theme.light) {
    return 'dark';
  }

  return 'light';
}

function $b51ec1a3cedfd27d29c956b270e96b5f$export$useScale(theme) {
  let matchesFine = useMediaQuery('(any-pointer: fine)');

  if (matchesFine && theme.medium) {
    return 'medium';
  }

  if (theme.large) {
    return 'large';
  }

  return 'medium';
}

// ASSET: /Users/govett/dev/react-spectrum/packages/@react-spectrum/provider/package.json
var $a306a8ce4e79e9eff01d3fa9fb0a$exports = {};
$a306a8ce4e79e9eff01d3fa9fb0a$exports = JSON.parse("{\"name\":\"@react-spectrum/provider\",\"version\":\"3.0.0-rc.1\",\"description\":\"Spectrum UI components in React\",\"license\":\"Apache-2.0\",\"main\":\"dist/main.js\",\"module\":\"dist/module.js\",\"types\":\"dist/types.d.ts\",\"source\":\"src/index.ts\",\"files\":[\"dist\"],\"sideEffects\":false,\"targets\":{\"main\":{\"includeNodeModules\":[\"@adobe/spectrum-css-temp\"]},\"module\":{\"includeNodeModules\":[\"@adobe/spectrum-css-temp\"]}},\"repository\":{\"type\":\"git\",\"url\":\"https://github.com/adobe-private/react-spectrum-v3\"},\"dependencies\":{\"@babel/runtime\":\"^7.6.2\",\"@react-aria/i18n\":\"^3.0.0-rc.1\",\"@react-aria/overlays\":\"^3.0.0-alpha.1\",\"@react-spectrum/utils\":\"^3.0.0-rc.1\",\"@react-types/provider\":\"^3.0.0-rc.1\",\"@react-types/shared\":\"^3.0.0-rc.1\",\"classnames\":\"^2.2.5\"},\"devDependencies\":{\"@adobe/spectrum-css-temp\":\"^3.0.0-alpha.1\"},\"peerDependencies\":{\"react\":\"^16.8.0\"},\"publishConfig\":{\"access\":\"public\"}}");

const $dd1bda183fdd07b54e8ea0f07d2319$var$Context = _react.createContext(null);

function $dd1bda183fdd07b54e8ea0f07d2319$var$Provider(props, ref) {
  let prevContext = useProvider();
  let prevColorScheme = prevContext && prevContext.colorScheme;
  let {
    theme = prevContext && prevContext.theme,
    defaultColorScheme
  } = props; // Hooks must always be called.

  let autoColorScheme = $b51ec1a3cedfd27d29c956b270e96b5f$export$useColorScheme(theme, defaultColorScheme);
  let autoScale = $b51ec1a3cedfd27d29c956b270e96b5f$export$useScale(theme);
  let {
    locale: prevLocale
  } = useLocale(); // if the new theme doesn't support the prevColorScheme, we must resort to the auto

  let usePrevColorScheme = !!theme[prevColorScheme]; // importance of color scheme props > parent > auto:(OS > default > omitted)

  let {
    colorScheme = usePrevColorScheme ? prevColorScheme : autoColorScheme,
    scale = prevContext ? prevContext.scale : autoScale,
    typekitId,
    locale = prevContext ? prevLocale : null,
    children,
    isQuiet,
    isEmphasized,
    isDisabled,
    isRequired,
    isReadOnly,
    validationState
  } = props,
      otherProps = _babelRuntimeHelpersEsmObjectWithoutProperties(props, ["colorScheme", "scale", "typekitId", "locale", "children", "isQuiet", "isEmphasized", "isDisabled", "isRequired", "isReadOnly", "validationState"]); // select only the props with values so undefined props don't overwrite prevContext values


  let currentProps = {
    version: $a306a8ce4e79e9eff01d3fa9fb0a$exports.version,
    theme,
    colorScheme,
    scale,
    isQuiet,
    isEmphasized,
    isDisabled,
    isRequired,
    isReadOnly,
    validationState
  };
  let filteredProps = {};
  Object.entries(currentProps).forEach(([key, value]) => value !== undefined && (filteredProps[key] = value)); // Merge options with parent provider

  let context = Object.assign({}, prevContext, filteredProps);
  useEffect(() => {
    $f647e0178bdc42fc3d79fa5$export$default(typekitId);
  }, [typekitId]); // Only wrap in a DOM node if the theme, colorScheme, or scale changed

  let contents = children;
  let domProps = filterDOMProps(otherProps);
  let {
    styleProps
  } = useStyleProps(otherProps);

  if (!prevContext || props.locale || theme !== prevContext.theme || colorScheme !== prevContext.colorScheme || scale !== prevContext.scale || Object.keys(domProps).length > 0 || otherProps.UNSAFE_className || Object.keys(styleProps.style).length > 0) {
    contents = /*#__PURE__*/_react.createElement($dd1bda183fdd07b54e8ea0f07d2319$var$ProviderWrapper, _babelRuntimeHelpersEsmExtends({}, props, {
      ref: ref
    }), contents);
  }

  return (/*#__PURE__*/_react.createElement($dd1bda183fdd07b54e8ea0f07d2319$var$Context.Provider, {
      value: context
    }, /*#__PURE__*/_react.createElement(_Provider, {
      locale: locale
    }, /*#__PURE__*/_react.createElement(ModalProvider, null, contents)))
  );
}
/**
 * Provider is the containing component that all other React Spectrum components
 * are the children of. Used to set locale, theme, scale, toast position and
 * provider, modal provider, and common props for children components. Providers
 * can be nested.
 */


export let Provider = _react.forwardRef($dd1bda183fdd07b54e8ea0f07d2319$var$Provider);
var $b5475d5dcfe4b4207518d367c05d169$$interop$default = $parcel$interopDefault($b5475d5dcfe4b4207518d367c05d169$exports);
var $f8ee1619a9e3731fcce290f252aaea5$$interop$default = $parcel$interopDefault($f8ee1619a9e3731fcce290f252aaea5$exports);

const $dd1bda183fdd07b54e8ea0f07d2319$var$ProviderWrapper = _react.forwardRef(function ProviderWrapper(props, ref) {
  let {
    children
  } = props,
      otherProps = _babelRuntimeHelpersEsmObjectWithoutProperties(props, ["children"]);

  let {
    locale,
    direction
  } = useLocale();
  let {
    theme,
    colorScheme,
    scale
  } = useProvider();
  let {
    modalProviderProps
  } = useModalProvider();
  let {
    styleProps
  } = useStyleProps(otherProps);
  let domRef = useDOMRef(ref);
  let themeKey = Object.keys(theme[colorScheme])[0];
  let scaleKey = Object.keys(theme[scale])[0];

  let className = _classnames(styleProps.className, $b5475d5dcfe4b4207518d367c05d169$$interop$default['spectrum'], $f8ee1619a9e3731fcce290f252aaea5$$interop$default['spectrum'], theme[colorScheme][themeKey], theme[scale][scaleKey], theme.global ? Object.values(theme.global) : null, {
    'react-spectrum-provider': shouldKeepSpectrumClassNames,
    spectrum: shouldKeepSpectrumClassNames,
    [themeKey]: shouldKeepSpectrumClassNames,
    [scaleKey]: shouldKeepSpectrumClassNames
  });

  return (/*#__PURE__*/_react.createElement("div", _babelRuntimeHelpersEsmExtends({}, filterDOMProps(otherProps), styleProps, modalProviderProps, {
      className: className,
      lang: locale,
      dir: direction,
      ref: domRef
    }), children)
  );
});

export function useProvider() {
  return useContext($dd1bda183fdd07b54e8ea0f07d2319$var$Context);
}
export function useProviderProps(props) {
  let context = useProvider();

  if (!context) {
    return props;
  }

  return Object.assign({}, {
    isQuiet: context.isQuiet,
    isEmphasized: context.isEmphasized,
    isDisabled: context.isDisabled,
    isRequired: context.isRequired,
    isReadOnly: context.isReadOnly,
    validationState: context.validationState
  }, props);
}