var _babelRuntimeHelpersSlicedToArray = $parcel$interopDefault(require("@babel/runtime/helpers/slicedToArray"));

var useControlledState = require("@react-stately/utils").useControlledState;

function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}

function useToggleState(props) {
  var isReadOnly = props.isReadOnly,
      onChange = props.onChange; // have to provide an empty function so useControlledState doesn't throw a fit
  // can't use useControlledState's prop calling because we need the event object from the change

  var _useControlledState = useControlledState(props.isSelected, props.defaultSelected || false, function () {}),
      _useControlledState2 = _babelRuntimeHelpersSlicedToArray(_useControlledState, 2),
      isSelected = _useControlledState2[0],
      setSelected = _useControlledState2[1];

  function updateSelected(value) {
    setSelected(value);

    if (onChange && !isReadOnly) {
      onChange(value);
    }
  }

  return {
    isSelected: isSelected,
    setSelected: updateSelected
  };
}

exports.useToggleState = useToggleState;